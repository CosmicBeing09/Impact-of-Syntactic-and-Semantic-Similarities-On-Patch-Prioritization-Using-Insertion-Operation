output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.020375, insert, 1.0, 1.0, 1.0
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.020375, insert, 1.0, 3.0, 1.0
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.020375, insert, 1.0, 4.0, 1.0
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.020375, insert, 1.0, 3.0, 1.0
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.020375, insert, 1.0, 1.0, 1.0
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.016419852941176472, insert, 1.0, 1.2000000000000002, 0.6764705882352942
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.016419852941176472, insert, 1.0, 1.6, 0.6764705882352942
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.015816525423728814, insert, 1.0, 1.0, 0.6271186440677966
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.015816525423728814, insert, 1.0, 1.0, 0.6271186440677966
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.01475810810810811, insert, 1.0, 0.0, 0.5405405405405406
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.01475810810810811, insert, 1.0, 0.0, 0.5405405405405406
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.014097297297297298, insert, 1.0, 1.6, 0.4864864864864865
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.014097297297297298, insert, 1.0, 1.2000000000000002, 0.4864864864864865
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.011817500000000002, insert, 1.0, 0.0, 0.3
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.011817500000000002, insert, 1.0, 0.0, 0.3
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.011817500000000002, insert, 1.0, 0.0, 0.3
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.011817500000000002, insert, 1.0, 0.0, 0.3
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.011489447916288196, insert, 0.43915997529339096, 1.5, 0.6470588235294118
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.011466250572834683, insert, 0.43915997529339096, 0.5, 0.6451612903225806
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.011419239773655582, insert, 0.4817788758492897, 1.2000000000000002, 0.6129032258064516
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.011328500000000002, insert, 1.0, 0.0, 0.26
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.011328500000000002, insert, 1.0, 0.0, 0.26
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.011258050847457627, insert, 1.0, 0.0, 0.2542372881355932
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.011258050847457627, insert, 1.0, 0.0, 0.2542372881355932
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.011117674308759947, insert, 0.4817788758492897, 1.5, 0.5882352941176471
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.011117674308759947, insert, 0.4817788758492897, 1.5, 0.5882352941176471
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.01105084745762712, insert, 1.0, 0.0, 0.23728813559322035
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.01105084745762712, insert, 1.0, 0.0, 0.23728813559322035
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.01105084745762712, insert, 1.0, 0.0, 0.23728813559322035
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.01105084745762712, insert, 1.0, 0.0, 0.23728813559322035
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.011049987131974472, insert, 0.43915997529339096, 1.5, 0.6111111111111112
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.010965134201808075, insert, 0.4817788758492897, 1.2000000000000002, 0.5757575757575758
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.010912212123885994, insert, 0.4817788758492897, 1.5, 0.5714285714285714
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.010656785377588506, insert, 0.43915997529339096, 1.5, 0.5789473684210527
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.010562926409600281, insert, 0.4817788758492897, 1.2000000000000002, 0.5428571428571428
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.010534605946279819, insert, 0.4817788758492897, 1.5, 0.5405405405405406
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.010370820465307804, insert, 0.43915997529339096, 0.5, 0.5555555555555556
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.010302903798641138, insert, 0.43915997529339096, 1.5, 0.55
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.010204200540874413, insert, 0.4817788758492897, 1.2000000000000002, 0.5135135135135135
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.01019572860740248, insert, 0.4817788758492897, 1.5, 0.5128205128205128
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.010013364324956926, insert, 0.43915997529339096, 0.5, 0.5263157894736842
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.009982725227212566, insert, 0.43915997529339096, 1.5, 0.5238095238095238
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.009889912472318052, insert, 0.4817788758492897, 1.5, 0.4878048780487805
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.009882267068940942, insert, 0.4817788758492897, 1.2000000000000002, 0.48717948717948717
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.009691653798641137, insert, 0.43915997529339096, 0.5, 0.5
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.009691653798641137, insert, 0.43915997529339096, 1.5, 0.5
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.009612544349799619, insert, 0.4817788758492897, 1.5, 0.46511627906976744
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.009591741740610737, insert, 0.4817788758492897, 1.2000000000000002, 0.4634146341463415
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.00942589292907592, insert, 0.43915997529339096, 1.5, 0.4782608695652174
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.009400582370069709, insert, 0.43915997529339096, 0.5, 0.47619047619047616
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.009359831171505045, insert, 0.4817788758492897, 1.5, 0.4444444444444444
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.009328242024218223, insert, 0.4817788758492897, 1.2000000000000002, 0.4418604651162791
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.009182278798641136, insert, 0.43915997529339096, 1.5, 0.4583333333333333
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.009135971980459318, insert, 0.43915997529339096, 0.5, 0.45454545454545453
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.009128625497746179, insert, 0.4817788758492897, 1.5, 0.425531914893617
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.009088164504838377, insert, 0.4817788758492897, 1.2000000000000002, 0.4222222222222222
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.008958153798641138, insert, 0.43915997529339096, 1.5, 0.44
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.008894371189945485, insert, 0.43915997529339096, 0.5, 0.43478260869565216
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.008868519114767456, insert, 0.4817788758492897, 1.2000000000000002, 0.40425531914893614
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.008672903798641137, insert, 0.43915997529339096, 0.5, 0.4166666666666667
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.008552173513847388, insert, 0.4817788758492897, 0.0, 0.3783783783783784
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.008552173513847388, insert, 0.4817788758492897, 0.0, 0.3783783783783784
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.008552173513847388, insert, 0.4817788758492897, 0.0, 0.3783783783783784
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.008552173513847388, insert, 0.4817788758492897, 0.0, 0.3783783783783784
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.008535234879722218, insert, 0.43915997529339096, 0.0, 0.40540540540540543
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.008535234879722218, insert, 0.43915997529339096, 0.0, 0.40540540540540543
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.008469153798641136, insert, 0.43915997529339096, 0.5, 0.4
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.00840481169337798, insert, 0.43915997529339096, 0.0, 0.39473684210526316
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.00831495937663325, insert, 0.4817788758492897, 0.0, 0.358974358974359
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 0.008179247374922791, insert, 0.013588634959851761, 1.0, 0.66
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 0.008174213403335392, insert, 0.012970969734403953, 1.0, 0.66
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.008163528798641136, insert, 0.43915997529339096, 0.0, 0.375
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.00810088808207415, insert, 0.4817788758492897, 0.0, 0.34146341463414637
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.007945225227212565, insert, 0.43915997529339096, 0.0, 0.35714285714285715
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 0.007924679431747994, insert, 0.012353304508956145, 1.0, 0.64
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.007906730396311245, insert, 0.4817788758492897, 0.0, 0.32558139534883723
String,SIMPLE_NAME, line no: 65,String,SIMPLE_NAME, line no: 49, 0.007825, insert, 0.033271719038817, 0.0, 1.0
format,SIMPLE_NAME, line no: 65,format,SIMPLE_NAME, line no: 65, 0.007825, insert, 1.0, 0.0, 1.0
scanner,SIMPLE_NAME, line no: 66,scanner,SIMPLE_NAME, line no: 51, 0.007825, insert, 0.010480887792848335, 1.0, 1.0
nextDouble,SIMPLE_NAME, line no: 66,nextDouble,SIMPLE_NAME, line no: 66, 0.007825, insert, 1.0, 0.0, 1.0
Math,SIMPLE_NAME, line no: 68,Math,SIMPLE_NAME, line no: 68, 0.007825, insert, 1.0, 0.0, 1.0
abs,SIMPLE_NAME, line no: 68,abs,SIMPLE_NAME, line no: 68, 0.007825, insert, 1.0, 0.0, 1.0
num,SIMPLE_NAME, line no: 68,num,SIMPLE_NAME, line no: 63, 0.007825, insert, 0.9975354282193469, 1.0, 1.0
value,SIMPLE_NAME, line no: 68,value,SIMPLE_NAME, line no: 7, 0.007825, insert, 0.0036968576709796672, 1.0, 1.0
String,SIMPLE_NAME, line no: 203,String,SIMPLE_NAME, line no: 49, 0.007825, insert, 0.033271719038817, 0.0, 1.0
format,SIMPLE_NAME, line no: 203,format,SIMPLE_NAME, line no: 65, 0.007825, insert, 1.0, 0.0, 1.0
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0077467674350047725, insert, 0.43915997529339096, 0.0, 0.3409090909090909
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.007729831171505044, insert, 0.4817788758492897, 0.0, 0.3111111111111111
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.007567987199873839, insert, 0.4817788758492897, 0.0, 0.2978723404255319
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.007565566842119399, insert, 0.43915997529339096, 0.0, 0.32608695652173914
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 0.007412920581255485, insert, 0.014823965410747375, 1.0, 0.5964912280701754
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0073994662986411365, insert, 0.43915997529339096, 0.0, 0.3125
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 0.007282160656855019, insert, 0.014206300185299567, 1.0, 0.5862068965517241
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.007246653798641136, insert, 0.43915997529339096, 0.0, 0.3
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 0.0071657305723348795, insert, 0.014823965410747375, 1.0, 0.576271186440678
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 0.00716069660074748, insert, 0.014206300185299567, 1.0, 0.576271186440678
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.007104997838171712, insert, 0.4817788758492897, 0.0, 0.26
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 0.006948459239329571, insert, 0.013588634959851761, 1.0, 0.559322033898305
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 0.006943425267742172, insert, 0.012970969734403953, 1.0, 0.559322033898305
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.006860497838171712, insert, 0.4817788758492897, 0.0, 0.24
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 0.006859240170516104, insert, 0.005558987029030266, 1.0, 0.5573770491803278
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.0067576537986411365, insert, 0.43915997529339096, 0.0, 0.26
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 0.006731187906324264, insert, 0.012353304508956145, 1.0, 0.5423728813559322
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.006620141905968322, insert, 0.4817788758492897, 0.0, 0.22033898305084745
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.006513153798641136, insert, 0.43915997529339096, 0.0, 0.24
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 0.006458420498384958, insert, 0.005558987029030266, 1.0, 0.5245901639344263
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 0.0064180261184152475, insert, 0.01605929586164299, 1.0, 0.5142857142857142
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 0.006324440838980765, insert, 0.015441630636195183, 1.0, 0.5070422535211268
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.006272797866437746, insert, 0.43915997529339096, 0.0, 0.22033898305084745
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 0.006243383261272391, insert, 0.01605929586164299, 1.0, 0.5
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 0.006152257740389216, insert, 0.015441630636195183, 1.0, 0.49295774647887325
nextDouble,SIMPLE_NAME, line no: 66,DoubleObj,SIMPLE_NAME, line no: 64, 0.00594121085080148, insert, 0.9981504315659679, 0.0, 0.6
num.value,QUALIFIED_NAME, line no: 68,value,SIMPLE_NAME, line no: 7, 0.005738333333333334, insert, 0.0036991368680641184, 0.5, 0.5555555555555556
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 0.005590649999627912, insert, 0.017294626312538603, 1.0, 0.4457831325301205
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 0.005520738661431219, insert, 0.016676961087090797, 1.0, 0.44047619047619047
num,SIMPLE_NAME, line no: 68,absnum,SIMPLE_NAME, line no: 63, 0.005475571472581639, insert, 0.9975354282193469, 0.0, 0.5
abs,SIMPLE_NAME, line no: 68,absnum,SIMPLE_NAME, line no: 63, 0.005475570283600494, insert, 0.9981504315659679, 0.0, 0.5
format,SIMPLE_NAME, line no: 65,floatnum,SIMPLE_NAME, line no: 64, 0.005473642945163278, insert, 0.9975354282193469, 0.0, 0.5
format,SIMPLE_NAME, line no: 203,floatnum,SIMPLE_NAME, line no: 64, 0.005473642945163278, insert, 0.9975354282193469, 0.0, 0.5
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.005468904380227786, insert, 0.43915997529339096, 0.0, 0.1261682242990654
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 0.005389724647650064, insert, 0.013588634959851761, 0.5, 0.4318181818181818
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.005297525875554889, insert, 0.43915997529339096, 1.8461538461538463, 0.11214953271028037
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 0.0052960716863749, insert, 0.017294626312538603, 1.0, 0.42168674698795183
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 0.005267380070002058, insert, 0.012970969734403953, 0.5, 0.4222222222222222
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 0.00522966723285979, insert, 0.016676961087090797, 1.0, 0.4166666666666667
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.005183273539106291, insert, 0.43915997529339096, 1.7142857142857142, 0.102803738317757
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.005126147370881991, insert, 0.43915997529339096, 0.0, 0.09813084112149532
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.005011895034433393, insert, 0.43915997529339096, 0.0, 0.08878504672897196
num.value,QUALIFIED_NAME, line no: 68,nextDouble,SIMPLE_NAME, line no: 66, 0.005008, insert, 1.0, 0.0, 0.4
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 0.0049900816476219885, insert, 0.01852995676343422, 1.0, 0.3958333333333333
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 0.004935160433766548, insert, 0.017912291537986413, 1.0, 0.3917525773195876
num,SIMPLE_NAME, line no: 68,floatnum,SIMPLE_NAME, line no: 64, 0.004888696472581638, insert, 0.9975354282193469, 0.0, 0.375
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 0.004834042829468247, insert, 0.013588634959851761, 0.6000000000000001, 0.38636363636363635
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 0.004775781834140633, insert, 0.033353922174181594, 0.0, 0.3684210526315789
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 0.004775781834140633, insert, 0.033353922174181594, 0.0, 0.3684210526315789
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 0.004774944137630344, insert, 0.012353304508956145, 0.0, 0.38235294117647056
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 0.004724046736668725, insert, 0.012970969734403953, 0.6000000000000001, 0.37777777777777777
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 0.004715975602223595, insert, 0.008647313156269302, 0.5, 0.38
Math,SIMPLE_NAME, line no: 68,format,SIMPLE_NAME, line no: 65, 0.004695, insert, 1.0, 0.0, 0.3333333333333333
num.value,QUALIFIED_NAME, line no: 68,num,SIMPLE_NAME, line no: 63, 0.004695, insert, 0.9981504315659679, 0.5, 0.3333333333333333
format,SIMPLE_NAME, line no: 65,Math,SIMPLE_NAME, line no: 68, 0.00469307147258164, insert, 0.9993838570548367, 0.0, 0.3333333333333333
value,SIMPLE_NAME, line no: 68,absnum,SIMPLE_NAME, line no: 63, 0.00469307147258164, insert, 0.9975354282193469, 0.0, 0.3333333333333333
format,SIMPLE_NAME, line no: 203,Math,SIMPLE_NAME, line no: 68, 0.00469307147258164, insert, 0.9993838570548367, 0.0, 0.3333333333333333
num.value,QUALIFIED_NAME, line no: 68,absnum,SIMPLE_NAME, line no: 63, 0.0046930702836004935, insert, 0.9981504315659679, 0.0, 0.3333333333333333
num.value,QUALIFIED_NAME, line no: 68,floatnum,SIMPLE_NAME, line no: 64, 0.0046930702836004935, insert, 0.9981504315659679, 0.0, 0.3333333333333333
format,SIMPLE_NAME, line no: 65,output,SIMPLE_NAME, line no: 49, 0.004691142945163278, insert, 0.033271719038817, 0.0, 0.3333333333333333
format,SIMPLE_NAME, line no: 203,output,SIMPLE_NAME, line no: 49, 0.004691142945163278, insert, 0.033271719038817, 0.0, 0.3333333333333333
num.value,QUALIFIED_NAME, line no: 68,DoubleObj,SIMPLE_NAME, line no: 64, 0.00468921085080148, insert, 0.9981504315659679, 0.0, 0.3333333333333333
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 0.004608050397621988, insert, 0.01852995676343422, 1.0, 0.3645833333333333
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 0.004557067650261393, insert, 0.017912291537986413, 1.0, 0.36082474226804123
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 0.004542336496887917, insert, 0.00926497838171711, 0.5, 0.36538461538461536
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 0.004535169659604128, insert, 0.019765287214329835, 1.0, 0.3577981651376147
nextDouble,SIMPLE_NAME, line no: 66,IntObj,SIMPLE_NAME, line no: 60, 0.00453271085080148, insert, 0.9981504315659679, 0.0, 0.3
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 0.004490371301027571, insert, 0.019147621988882025, 1.0, 0.35454545454545455
scanner,SIMPLE_NAME, line no: 66,value,SIMPLE_NAME, line no: 7, 0.0044714285714285715, insert, 0.0036991368680641184, 0.0, 0.2857142857142857
value,SIMPLE_NAME, line no: 68,scanner,SIMPLE_NAME, line no: 51, 0.004469500044010211, insert, 0.010474430067775724, 0.0, 0.2857142857142857
scanner,SIMPLE_NAME, line no: 66,absnum,SIMPLE_NAME, line no: 63, 0.004469498855029065, insert, 0.9981504315659679, 0.0, 0.2857142857142857
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 0.004454071307824843, insert, 0.033353922174181594, 0.0, 0.34210526315789475
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 0.004410289002308118, insert, 0.014823965410747375, 0.5714285714285714, 0.3508771929824561
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 0.004331298587889502, insert, 0.014206300185299567, 0.5714285714285714, 0.3448275862068966
Math,SIMPLE_NAME, line no: 68,abs,SIMPLE_NAME, line no: 68, 0.00430375, insert, 1.0, 0.0, 0.25
abs,SIMPLE_NAME, line no: 68,Math,SIMPLE_NAME, line no: 68, 0.00430375, insert, 1.0, 0.0, 0.25
value,SIMPLE_NAME, line no: 68,floatnum,SIMPLE_NAME, line no: 64, 0.004301821472581639, insert, 0.9975354282193469, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,floatnum,SIMPLE_NAME, line no: 64, 0.004301820283600493, insert, 0.9981504315659679, 0.0, 0.25
Math,SIMPLE_NAME, line no: 68,floatnum,SIMPLE_NAME, line no: 64, 0.004301820283600493, insert, 0.9981504315659679, 0.0, 0.25
String,SIMPLE_NAME, line no: 65,floatnum,SIMPLE_NAME, line no: 64, 0.004299892945163278, insert, 0.9975354282193469, 0.0, 0.25
String,SIMPLE_NAME, line no: 203,floatnum,SIMPLE_NAME, line no: 64, 0.004299892945163278, insert, 0.9975354282193469, 0.0, 0.25
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 0.004236699330584445, insert, 0.033353922174181594, 0.0, 0.32432432432432434
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 0.004226975602223595, insert, 0.008647313156269302, 0.0, 0.34
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 0.004215382852816354, insert, 0.033353922174181594, 0.0, 0.3225806451612903
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 0.00418383446571958, insert, 0.033353922174181594, 1.0, 0.32
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 0.004179351755283062, insert, 0.021000617665225447, 1.0, 0.32786885245901637
num.value,QUALIFIED_NAME, line no: 68,scanner,SIMPLE_NAME, line no: 51, 0.004173333333333334, insert, 0.010480887792848335, 0.0, 0.2222222222222222
num.value,QUALIFIED_NAME, line no: 68,format,SIMPLE_NAME, line no: 65, 0.004173333333333334, insert, 1.0, 0.0, 0.2222222222222222
num.value,QUALIFIED_NAME, line no: 68,output,SIMPLE_NAME, line no: 49, 0.004171403616933827, insert, 0.03329223181257707, 0.0, 0.2222222222222222
value,SIMPLE_NAME, line no: 68,DoubleObj,SIMPLE_NAME, line no: 64, 0.00416561922365989, insert, 0.9975354282193469, 0.0, 0.2222222222222222
"\nEnter an integer > ",STRING_LITERAL, line no: 65,String,SIMPLE_NAME, line no: 49, 0.004150652173913044, insert, 0.033271719038817, 0.0, 0.21739130434782608
"\nEnter an integer > ",STRING_LITERAL, line no: 65,scanner,SIMPLE_NAME, line no: 51, 0.0041487236464946824, insert, 0.010474430067775724, 0.0, 0.21739130434782608
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 0.004141730818481748, insert, 0.02038295243977764, 1.0, 0.3252032520325203
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 0.0040865458063931185, insert, 0.019765287214329835, 1.0, 0.3211009174311927
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 0.00407214418919561, insert, 0.00926497838171711, 0.0, 0.3269230769230769
scanner,SIMPLE_NAME, line no: 66,nextDouble,SIMPLE_NAME, line no: 66, 0.004069000000000001, insert, 1.0, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,value,SIMPLE_NAME, line no: 7, 0.004069000000000001, insert, 0.0036991368680641184, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,scanner,SIMPLE_NAME, line no: 51, 0.004069000000000001, insert, 0.010480887792848335, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,num,SIMPLE_NAME, line no: 63, 0.004069000000000001, insert, 0.9981504315659679, 0.0, 0.2
Math,SIMPLE_NAME, line no: 68,value,SIMPLE_NAME, line no: 7, 0.004069000000000001, insert, 0.0036991368680641184, 0.0, 0.2
abs,SIMPLE_NAME, line no: 68,value,SIMPLE_NAME, line no: 7, 0.004069000000000001, insert, 0.0036991368680641184, 0.0, 0.2
num,SIMPLE_NAME, line no: 68,value,SIMPLE_NAME, line no: 7, 0.004069000000000001, insert, 0.0036968576709796672, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,num,SIMPLE_NAME, line no: 63, 0.004069000000000001, insert, 0.9975354282193469, 0.0, 0.2
num,SIMPLE_NAME, line no: 68,nextDouble,SIMPLE_NAME, line no: 66, 0.004067071472581639, insert, 0.9993838570548367, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,nextDouble,SIMPLE_NAME, line no: 66, 0.004067071472581639, insert, 0.9993838570548367, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,Math,SIMPLE_NAME, line no: 68, 0.004067071472581639, insert, 0.9993838570548367, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,abs,SIMPLE_NAME, line no: 68, 0.004067071472581639, insert, 0.9993838570548367, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,output,SIMPLE_NAME, line no: 49, 0.004067070283600493, insert, 0.03329223181257707, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,absnum,SIMPLE_NAME, line no: 63, 0.004067070283600493, insert, 0.9981504315659679, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,floatnum,SIMPLE_NAME, line no: 64, 0.004067070283600493, insert, 0.9981504315659679, 0.0, 0.2
scanner,SIMPLE_NAME, line no: 66,Scanner,SIMPLE_NAME, line no: 44, 0.004060950325876343, insert, 6.165228113440197E-4, 0.0, 0.8571428571428571
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 0.004055826490571522, insert, 0.012353304508956145, 0.0, 0.3235294117647059
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 0.004045825846482116, insert, 0.019147621988882025, 1.0, 0.3181818181818182
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 0.004000520102195519, insert, 0.013588634959851761, 0.0, 0.3181818181818182
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 0.003981341633887065, insert, 0.014823965410747375, 0.6666666666666666, 0.3157894736842105
"\nEnter an integer > ",STRING_LITERAL, line no: 65,nextDouble,SIMPLE_NAME, line no: 66, 0.003944593211712074, insert, 0.9993838570548367, 0.0, 0.17391304347826086
String,SIMPLE_NAME, line no: 65,format,SIMPLE_NAME, line no: 65, 0.0039125, insert, 1.0, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,String,SIMPLE_NAME, line no: 49, 0.0039125, insert, 0.033271719038817, 0.0, 0.16666666666666666
Math,SIMPLE_NAME, line no: 68,String,SIMPLE_NAME, line no: 49, 0.0039125, insert, 0.03329223181257707, 0.0, 0.16666666666666666
abs,SIMPLE_NAME, line no: 68,format,SIMPLE_NAME, line no: 65, 0.0039125, insert, 1.0, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,format,SIMPLE_NAME, line no: 65, 0.0039125, insert, 1.0, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,String,SIMPLE_NAME, line no: 49, 0.0039125, insert, 0.033271719038817, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 65,num,SIMPLE_NAME, line no: 63, 0.0039105714725816395, insert, 0.9975354282193469, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 65,Math,SIMPLE_NAME, line no: 68, 0.0039105714725816395, insert, 0.9993838570548367, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,value,SIMPLE_NAME, line no: 7, 0.0039105714725816395, insert, 0.0036968576709796672, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,num,SIMPLE_NAME, line no: 63, 0.0039105714725816395, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,abs,SIMPLE_NAME, line no: 68, 0.0039105714725816395, insert, 0.9993838570548367, 0.0, 0.16666666666666666
num,SIMPLE_NAME, line no: 68,String,SIMPLE_NAME, line no: 49, 0.0039105714725816395, insert, 0.033271719038817, 0.0, 0.16666666666666666
num,SIMPLE_NAME, line no: 68,format,SIMPLE_NAME, line no: 65, 0.0039105714725816395, insert, 0.9993838570548367, 0.0, 0.16666666666666666
value,SIMPLE_NAME, line no: 68,format,SIMPLE_NAME, line no: 65, 0.0039105714725816395, insert, 0.9993838570548367, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,num,SIMPLE_NAME, line no: 63, 0.0039105714725816395, insert, 0.9975354282193469, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,Math,SIMPLE_NAME, line no: 68, 0.0039105714725816395, insert, 0.9993838570548367, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,value,SIMPLE_NAME, line no: 7, 0.0039105714725816395, insert, 0.0036968576709796672, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,num,SIMPLE_NAME, line no: 63, 0.0039105714725816395, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,abs,SIMPLE_NAME, line no: 68, 0.0039105714725816395, insert, 0.9993838570548367, 0.0, 0.16666666666666666
Math,SIMPLE_NAME, line no: 68,output,SIMPLE_NAME, line no: 49, 0.003910570283600493, insert, 0.03329223181257707, 0.0, 0.16666666666666666
Math,SIMPLE_NAME, line no: 68,absnum,SIMPLE_NAME, line no: 63, 0.003910570283600493, insert, 0.9981504315659679, 0.0, 0.16666666666666666
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 0.003909746863751571, insert, 0.014206300185299567, 0.6666666666666666, 0.3103448275862069
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 0.003909046736668726, insert, 0.012970969734403953, 0.0, 0.3111111111111111
String,SIMPLE_NAME, line no: 65,output,SIMPLE_NAME, line no: 49, 0.003908642945163278, insert, 0.033271719038817, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 65,absnum,SIMPLE_NAME, line no: 63, 0.003908642945163278, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,absnum,SIMPLE_NAME, line no: 63, 0.003908642945163278, insert, 0.9975354282193469, 0.0, 0.16666666666666666
num,SIMPLE_NAME, line no: 68,output,SIMPLE_NAME, line no: 49, 0.003908642945163278, insert, 0.033271719038817, 0.0, 0.16666666666666666
value,SIMPLE_NAME, line no: 68,output,SIMPLE_NAME, line no: 49, 0.003908642945163278, insert, 0.033271719038817, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,output,SIMPLE_NAME, line no: 49, 0.003908642945163278, insert, 0.033271719038817, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,absnum,SIMPLE_NAME, line no: 63, 0.003908642945163278, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,absnum,SIMPLE_NAME, line no: 63, 0.003908642945163278, insert, 0.9975354282193469, 0.0, 0.16666666666666666
Math,SIMPLE_NAME, line no: 68,IntObj,SIMPLE_NAME, line no: 60, 0.0039067108508014795, insert, 0.9981504315659679, 0.0, 0.16666666666666666
abs,SIMPLE_NAME, line no: 68,IntObj,SIMPLE_NAME, line no: 60, 0.0039067108508014795, insert, 0.9981504315659679, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 65,IntObj,SIMPLE_NAME, line no: 60, 0.003904785890326556, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,IntObj,SIMPLE_NAME, line no: 60, 0.003904785890326556, insert, 0.9975354282193469, 0.0, 0.16666666666666666
num,SIMPLE_NAME, line no: 68,IntObj,SIMPLE_NAME, line no: 60, 0.003904785890326556, insert, 0.9975354282193469, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,IntObj,SIMPLE_NAME, line no: 60, 0.003904785890326556, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,IntObj,SIMPLE_NAME, line no: 60, 0.003904785890326556, insert, 0.9975354282193469, 0.0, 0.16666666666666666
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 0.003867422701013698, insert, 0.033353922174181594, 0.0, 0.29411764705882354
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 0.0038370480353494565, insert, 0.00926497838171711, 0.0, 0.3076923076923077
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 0.0038034451993686088, insert, 0.022235948116121063, 1.0, 0.2962962962962963
scanner,SIMPLE_NAME, line no: 66,String,SIMPLE_NAME, line no: 49, 0.0038007142857142857, insert, 0.03329223181257707, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,num,SIMPLE_NAME, line no: 63, 0.0038007142857142857, insert, 0.9981504315659679, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,format,SIMPLE_NAME, line no: 65, 0.0038007142857142857, insert, 1.0, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,Math,SIMPLE_NAME, line no: 68, 0.0038007142857142857, insert, 1.0, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,abs,SIMPLE_NAME, line no: 68, 0.0038007142857142857, insert, 1.0, 0.0, 0.14285714285714285
Math,SIMPLE_NAME, line no: 68,scanner,SIMPLE_NAME, line no: 51, 0.0038007142857142857, insert, 0.010480887792848335, 0.0, 0.14285714285714285
abs,SIMPLE_NAME, line no: 68,scanner,SIMPLE_NAME, line no: 51, 0.0038007142857142857, insert, 0.010480887792848335, 0.0, 0.14285714285714285
String,SIMPLE_NAME, line no: 65,scanner,SIMPLE_NAME, line no: 51, 0.0037987857582959246, insert, 0.010474430067775724, 0.0, 0.14285714285714285
format,SIMPLE_NAME, line no: 65,scanner,SIMPLE_NAME, line no: 51, 0.0037987857582959246, insert, 0.010474430067775724, 0.0, 0.14285714285714285
num,SIMPLE_NAME, line no: 68,scanner,SIMPLE_NAME, line no: 51, 0.0037987857582959246, insert, 0.010474430067775724, 0.0, 0.14285714285714285
String,SIMPLE_NAME, line no: 203,scanner,SIMPLE_NAME, line no: 51, 0.0037987857582959246, insert, 0.010474430067775724, 0.0, 0.14285714285714285
format,SIMPLE_NAME, line no: 203,scanner,SIMPLE_NAME, line no: 51, 0.0037987857582959246, insert, 0.010474430067775724, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,IntObj,SIMPLE_NAME, line no: 60, 0.0037949251365157655, insert, 0.9981504315659679, 0.0, 0.14285714285714285
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 0.003771777240853105, insert, 0.021618282890673256, 1.0, 0.29411764705882354
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 0.003766867949676538, insert, 0.014823965410747375, 0.0, 0.2982456140350877
"\nEnter an integer > ",STRING_LITERAL, line no: 65,format,SIMPLE_NAME, line no: 65, 0.0037423913043478263, insert, 1.0, 0.0, 0.13043478260869565
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 0.0037379756022235945, insert, 0.008647313156269302, 0.0, 0.3
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 0.0037351388912074523, insert, 0.012353304508956145, 0.0, 0.2972972972972973
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,scanner,SIMPLE_NAME, line no: 51, 0.0037149464725816394, insert, 0.010474430067775724, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,floatnum,SIMPLE_NAME, line no: 64, 0.0037149452836004937, insert, 0.9981504315659679, 0.0, 0.125
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 0.003698971001682605, insert, 0.014206300185299567, 0.0, 0.29310344827586204
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 0.0036783271651191288, insert, 0.021000617665225447, 1.0, 0.28688524590163933
num.value,QUALIFIED_NAME, line no: 68,String,SIMPLE_NAME, line no: 49, 0.0036516666666666668, insert, 0.03329223181257707, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,Math,SIMPLE_NAME, line no: 68, 0.0036516666666666668, insert, 1.0, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,abs,SIMPLE_NAME, line no: 68, 0.0036516666666666668, insert, 1.0, 0.0, 0.1111111111111111
scanner,SIMPLE_NAME, line no: 66,DoubleObj,SIMPLE_NAME, line no: 64, 0.0036458775174681465, insert, 0.9981504315659679, 0.0, 0.1111111111111111
abs,SIMPLE_NAME, line no: 68,DoubleObj,SIMPLE_NAME, line no: 64, 0.0036458775174681465, insert, 0.9981504315659679, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,IntObj,SIMPLE_NAME, line no: 60, 0.0036458775174681465, insert, 0.9981504315659679, 0.0, 0.1111111111111111
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 0.0036447795989695535, insert, 0.02038295243977764, 1.0, 0.2845528455284553
format,SIMPLE_NAME, line no: 65,DoubleObj,SIMPLE_NAME, line no: 64, 0.003643952556993223, insert, 0.9975354282193469, 0.0, 0.1111111111111111
num,SIMPLE_NAME, line no: 68,DoubleObj,SIMPLE_NAME, line no: 64, 0.003643952556993223, insert, 0.9975354282193469, 0.0, 0.1111111111111111
format,SIMPLE_NAME, line no: 203,DoubleObj,SIMPLE_NAME, line no: 64, 0.003643952556993223, insert, 0.9975354282193469, 0.0, 0.1111111111111111
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 0.0036237404041295327, insert, 0.01605929586164299, 0.625, 0.2857142857142857
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 0.0036237404041295327, insert, 0.01605929586164299, 0.7142857142857142, 0.2857142857142857
nextDouble,SIMPLE_NAME, line no: 66,String,SIMPLE_NAME, line no: 49, 0.0035995000000000003, insert, 0.03329223181257707, 0.0, 0.1
nextDouble,SIMPLE_NAME, line no: 66,format,SIMPLE_NAME, line no: 65, 0.0035995000000000003, insert, 1.0, 0.0, 0.1
nextDouble,SIMPLE_NAME, line no: 66,Math,SIMPLE_NAME, line no: 68, 0.0035995000000000003, insert, 1.0, 0.0, 0.1
nextDouble,SIMPLE_NAME, line no: 66,abs,SIMPLE_NAME, line no: 68, 0.0035995000000000003, insert, 1.0, 0.0, 0.1
Math,SIMPLE_NAME, line no: 68,nextDouble,SIMPLE_NAME, line no: 66, 0.0035995000000000003, insert, 1.0, 0.0, 0.1
abs,SIMPLE_NAME, line no: 68,nextDouble,SIMPLE_NAME, line no: 66, 0.0035995000000000003, insert, 1.0, 0.0, 0.1
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 0.0035979672009296385, insert, 0.00926497838171711, 0.0, 0.288135593220339
String,SIMPLE_NAME, line no: 65,nextDouble,SIMPLE_NAME, line no: 66, 0.003597571472581639, insert, 0.9993838570548367, 0.0, 0.1
format,SIMPLE_NAME, line no: 65,nextDouble,SIMPLE_NAME, line no: 66, 0.003597571472581639, insert, 0.9993838570548367, 0.0, 0.1
String,SIMPLE_NAME, line no: 203,nextDouble,SIMPLE_NAME, line no: 66, 0.003597571472581639, insert, 0.9993838570548367, 0.0, 0.1
format,SIMPLE_NAME, line no: 203,nextDouble,SIMPLE_NAME, line no: 66, 0.003597571472581639, insert, 0.9993838570548367, 0.0, 0.1
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,String,SIMPLE_NAME, line no: 49, 0.0035701562500000004, insert, 0.033271719038817, 0.0, 0.09375
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 0.003569511261515977, insert, 0.015441630636195183, 0.625, 0.28169014084507044
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 0.003569511261515977, insert, 0.015441630636195183, 0.7142857142857142, 0.28169014084507044
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,value=i; ,EXPRESSION_STATEMENT, line no: 7, 0.0035693294347366954, insert, 0.0024706609017912293, 0.25, 0.2903225806451613
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,value,SIMPLE_NAME, line no: 7, 0.003568227722581639, insert, 0.0036968576709796672, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,nextDouble,SIMPLE_NAME, line no: 66, 0.003568227722581639, insert, 0.9993838570548367, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,Math,SIMPLE_NAME, line no: 68, 0.003568227722581639, insert, 0.9993838570548367, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,absnum,SIMPLE_NAME, line no: 63, 0.003566299195163278, insert, 0.9975354282193469, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,floatnum,SIMPLE_NAME, line no: 64, 0.003566299195163278, insert, 0.9975354282193469, 0.0, 0.09375
"\nEnter an integer > ",STRING_LITERAL, line no: 65,value,SIMPLE_NAME, line no: 7, 0.0035363323421468565, insert, 0.0036968576709796672, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,Math,SIMPLE_NAME, line no: 68, 0.0035363323421468565, insert, 0.9993838570548367, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,output,SIMPLE_NAME, line no: 49, 0.0035344038147284954, insert, 0.033271719038817, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,absnum,SIMPLE_NAME, line no: 63, 0.0035344038147284954, insert, 0.9975354282193469, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,floatnum,SIMPLE_NAME, line no: 64, 0.0035344038147284954, insert, 0.9975354282193469, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,IntObj,SIMPLE_NAME, line no: 60, 0.0035305467598917735, insert, 0.9975354282193469, 0.0, 0.08695652173913043
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 0.0034953449743752403, insert, 0.02347127856701668, 1.0, 0.2702702702702703
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 0.003468136143364659, insert, 0.02285361334156887, 1.0, 0.2684563758389262
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 0.0034490975469866755, insert, 0.01605929586164299, 0.0, 0.2714285714285714
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,format,SIMPLE_NAME, line no: 65, 0.0034234375000000003, insert, 1.0, 0.0, 0.0625
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,abs,SIMPLE_NAME, line no: 68, 0.003421508972581639, insert, 0.9993838570548367, 0.0, 0.0625
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,DoubleObj,SIMPLE_NAME, line no: 64, 0.003415723390326556, insert, 0.9975354282193469, 0.0, 0.0625
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 0.0033973281629244272, insert, 0.015441630636195183, 0.0, 0.2676056338028169
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 0.00338572983951173, insert, 0.008647313156269302, 0.0, 0.2711864406779661
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 0.003379885313177207, insert, 0.033353922174181594, 1.0, 0.2542372881355932
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 0.003366855727657148, insert, 0.00926497838171711, 0.0, 0.2692307692307692
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 0.0033506674215908307, insert, 0.022235948116121063, 1.0, 0.25925925925925924
"\nEnter an integer > ",STRING_LITERAL, line no: 65,num,SIMPLE_NAME, line no: 63, 0.003332201907364248, insert, 0.9975354282193469, 0.0, 0.043478260869565216
"\nEnter an integer > ",STRING_LITERAL, line no: 65,abs,SIMPLE_NAME, line no: 68, 0.003332201907364248, insert, 0.9993838570548367, 0.0, 0.043478260869565216
"\nEnter an integer > ",STRING_LITERAL, line no: 65,DoubleObj,SIMPLE_NAME, line no: 64, 0.0033264163251091653, insert, 0.9975354282193469, 0.0, 0.043478260869565216
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 0.0033223287114413393, insert, 0.021618282890673256, 1.0, 0.25735294117647056
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,num,SIMPLE_NAME, line no: 63, 0.003274790222581639, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,output,SIMPLE_NAME, line no: 49, 0.003272861695163278, insert, 0.033271719038817, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,IntObj,SIMPLE_NAME, line no: 60, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d1,SIMPLE_NAME, line no: 60, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d2,SIMPLE_NAME, line no: 60, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d3,SIMPLE_NAME, line no: 60, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d4,SIMPLE_NAME, line no: 60, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d5,SIMPLE_NAME, line no: 61, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d6,SIMPLE_NAME, line no: 61, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d7,SIMPLE_NAME, line no: 61, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d8,SIMPLE_NAME, line no: 62, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d9,SIMPLE_NAME, line no: 62, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d10,SIMPLE_NAME, line no: 62, 0.0032690046403265564, insert, 0.9975354282193469, 0.0, 0.03125
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 0.0032489756022235946, insert, 0.008647313156269302, 0.0, 0.26
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 0.003234023493603816, insert, 0.017294626312538603, 0.75, 0.25301204819277107
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 0.00319216723285979, insert, 0.016676961087090797, 0.75, 0.25
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 0.0030867343369773105, insert, 0.017294626312538603, 0.0, 0.24096385542168675
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 0.0030867343369773105, insert, 0.017294626312538603, 0.6666666666666666, 0.24096385542168675
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 0.003082338217618483, insert, 0.02347127856701668, 1.0, 0.23648648648648649
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 0.0030579012440358, insert, 0.02285361334156887, 1.0, 0.2348993288590604
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 0.0030466315185740758, insert, 0.016676961087090797, 0.0, 0.23809523809523808
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 0.0030466315185740758, insert, 0.016676961087090797, 0.6666666666666666, 0.23809523809523808
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 0.0029525816476219887, insert, 0.01852995676343422, 0.7777777777777777, 0.22916666666666666
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 0.002918665588405723, insert, 0.017912291537986413, 0.7777777777777777, 0.2268041237113402
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,value=i; ,EXPRESSION_STATEMENT, line no: 7, 0.002896606474584893, insert, 0.0024706609017912293, 0.3333333333333333, 0.23529411764705882
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 0.0028252378976219893, insert, 0.01852995676343422, 0.0, 0.21875
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 0.002792634660570672, insert, 0.017912291537986413, 0.0, 0.21649484536082475
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 0.002697894147621989, insert, 0.01852995676343422, 0.7000000000000001, 0.20833333333333334
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 0.00266660373273562, insert, 0.017912291537986413, 0.7000000000000001, 0.20618556701030927
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,value=i; ,EXPRESSION_STATEMENT, line no: 7, 0.002663379129592842, insert, 0.0024706609017912293, 0.0, 0.21621621621621623
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 0.0026506336131390555, insert, 0.005558987029030266, 0.0, 0.21311475409836064
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 0.0026285182834573386, insert, 0.019765287214329835, 0.0, 0.2018348623853211
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 0.0026285182834573386, insert, 0.019765287214329835, 0.8, 0.2018348623853211
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 0.0026010531192093888, insert, 0.019147621988882025, 0.0, 0.2
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 0.0026010531192093888, insert, 0.019147621988882025, 0.8, 0.2
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 0.00247233446571958, insert, 0.033353922174181594, 0.0, 0.18
abs,SIMPLE_NAME, line no: 68,args,SIMPLE_NAME, line no: 50, 0.002457493834771887, insert, 0.03514180024660912, 0.0, 0.5
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 0.0024042063568518344, insert, 0.019765287214329835, 0.7272727272727273, 0.1834862385321101
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 0.002378780391936661, insert, 0.019147621988882025, 0.7272727272727273, 0.18181818181818182
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 0.002375663230692899, insert, 0.021000617665225447, 0.0, 0.18032786885245902
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 0.002375663230692899, insert, 0.021000617665225447, 0.8181818181818182, 0.18032786885245902
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 0.002352706428237846, insert, 0.02038295243977764, 0.0, 0.17886178861788618
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 0.002352706428237846, insert, 0.02038295243977764, 0.8181818181818182, 0.17886178861788618
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 0.002249813941007908, insert, 0.005558987029030266, 0.0, 0.18032786885245902
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 0.002249813941007908, insert, 0.005558987029030266, 0.0, 0.18032786885245902
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 0.0021752533946273246, insert, 0.021000617665225447, 0.75, 0.16393442622950818
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 0.0021734451993686093, insert, 0.022235948116121063, 0.0, 0.16296296296296298
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 0.0021734451993686093, insert, 0.022235948116121063, 0.8333333333333333, 0.16296296296296298
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 0.002153925940432968, insert, 0.02038295243977764, 0.75, 0.16260162601626016
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 0.0021537625349707518, insert, 0.021618282890673256, 0.0, 0.16176470588235295
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 0.0021537625349707518, insert, 0.021618282890673256, 0.8333333333333333, 0.16176470588235295
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 0.0021366649741941563, insert, 0.033353922174181594, 0.0, 0.15254237288135594
String,SIMPLE_NAME, line no: 65,println,SIMPLE_NAME, line no: 56, 0.0021201403925710763, insert, 0.03450400492914356, 0.0, 0.42857142857142855
String,SIMPLE_NAME, line no: 203,println,SIMPLE_NAME, line no: 56, 0.0021201403925710763, insert, 0.03450400492914356, 0.0, 0.42857142857142855
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 0.002008520650050916, insert, 0.02347127856701668, 0.0, 0.14864864864864866
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 0.002008520650050916, insert, 0.02347127856701668, 0.8461538461538463, 0.14864864864864866
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 0.0019923340882574978, insert, 0.022235948116121063, 0.7692307692307693, 0.14814814814814814
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 0.0019912905057807664, insert, 0.02285361334156887, 0.0, 0.1476510067114094
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 0.0019912905057807664, insert, 0.02285361334156887, 0.8461538461538463, 0.1476510067114094
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 0.001973983123206046, insert, 0.021618282890673256, 0.7692307692307693, 0.14705882352941177
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.0019364916731037082, insert, 1.0, 3.0, 1.0
value,SIMPLE_NAME, line no: 68,java,SIMPLE_NAME, line no: 44, 0.0019165705483672212, insert, 0.0012322858903265558, 0.0, 0.4
num.value,QUALIFIED_NAME, line no: 68,num.value,QUALIFIED_NAME, line no: 67, 0.001875, insert, 0.9993834771886559, 2.0, 1.0
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.0018623281622188854, insert, 1.0, 1.5, 0.9361702127659575
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0018623281622188854, insert, 1.0, 1.5, 0.9361702127659575
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0018590320061795597, insert, 1.0, 1.5, 0.9333333333333333
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0018590320061795597, insert, 1.0, 1.5, 0.9333333333333333
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0018554292309737857, insert, 1.0, 1.5, 0.9302325581395349
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0018554292309737857, insert, 1.0, 1.5, 0.9302325581395349
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0018514749655040334, insert, 1.0, 1.5, 0.926829268292683
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0018514749655040334, insert, 1.0, 1.5, 0.926829268292683
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0018471151343450757, insert, 1.0, 1.5, 0.9230769230769231
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0018471151343450757, insert, 1.0, 1.5, 0.9230769230769231
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 0.0018433179473482132, insert, 0.02347127856701668, 0.7857142857142857, 0.13513513513513514
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0018422839700878522, insert, 1.0, 1.5, 0.918918918918919
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0018422839700878522, insert, 1.0, 1.5, 0.918918918918919
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0018369006727726603, insert, 1.0, 1.5, 0.9142857142857143
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0018369006727726603, insert, 1.0, 1.5, 0.9142857142857143
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 0.0018271965460492224, insert, 0.02285361334156887, 0.7857142857142857, 0.1342281879194631
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.0018128858216290035, insert, 1.0, 1.5, 0.8936170212765957
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0018128858216290035, insert, 1.0, 1.5, 0.8936170212765957
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0018073922282301276, insert, 1.0, 1.5, 0.8888888888888888
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0018073922282301276, insert, 1.0, 1.5, 0.8888888888888888
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0018013876028871705, insert, 1.0, 1.5, 0.8837209302325582
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0018013876028871705, insert, 1.0, 1.5, 0.8837209302325582
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.0017982559598236896, insert, 0.9115384615384615, 1.5, 0.94
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.001795351222314034, insert, 0.9115384615384615, 1.5, 0.9375
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0017947971604375832, insert, 1.0, 1.5, 0.8780487804878049
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0017947971604375832, insert, 1.0, 1.5, 0.8780487804878049
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0017921938989339738, insert, 0.9115384615384615, 1.5, 0.9347826086956522
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.001788749546155726, insert, 0.9115384615384615, 1.5, 0.9318181818181818
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0017875307751726538, insert, 1.0, 1.5, 0.8717948717948718
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0017875307751726538, insert, 1.0, 1.5, 0.8717948717948718
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.00178497715977955, insert, 0.9115384615384615, 1.5, 0.9285714285714286
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0017808275347657564, insert, 0.9115384615384615, 1.5, 0.925
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0017794788347439481, insert, 1.0, 1.5, 0.8648648648648649
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0017794788347439481, insert, 1.0, 1.5, 0.8648648648648649
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0017762411071189316, insert, 0.9115384615384615, 1.5, 0.9210526315789473
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.0017711450764002377, insert, 0.9115384615384615, 1.5, 0.9166666666666666
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0017711450764002377, insert, 0.9115384615384615, 0.6000000000000001, 0.9166666666666666
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0017669353118934903, insert, 0.9115384615384615, 0.6000000000000001, 0.9130434782608695
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.0017634434810391215, insert, 1.0, 1.5, 0.851063829787234
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0017634434810391215, insert, 1.0, 1.5, 0.851063829787234
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0017623428415224935, insert, 0.9115384615384615, 0.6000000000000001, 0.9090909090909091
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.0017573129930209255, insert, 0.9115384615384615, 0.6000000000000001, 0.9047619047619048
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0017557524502806953, insert, 1.0, 1.5, 0.8444444444444444
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0017557524502806953, insert, 1.0, 1.5, 0.8444444444444444
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.0017517801596692007, insert, 0.9115384615384615, 1.5, 0.9
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0017517801596692007, insert, 0.9115384615384615, 0.6000000000000001, 0.9
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0017473459748005556, insert, 1.0, 1.5, 0.8372093023255814
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0017473459748005556, insert, 1.0, 1.5, 0.8372093023255814
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0017456649228067681, insert, 0.9115384615384615, 0.6000000000000001, 0.8947368421052632
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0017443638085807185, insert, 0.9115384615384615, 0.6000000000000001, 0.8936170212765957
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.0017388702151818426, insert, 0.9115384615384615, 0.6000000000000001, 0.8888888888888888
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0017388702151818426, insert, 0.9115384615384615, 0.6000000000000001, 0.8888888888888888
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0017381193553711331, insert, 1.0, 1.5, 0.8292682926829268
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0017381193553711331, insert, 1.0, 1.5, 0.8292682926829268
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.0017328655898388853, insert, 0.9115384615384615, 0.6000000000000001, 0.8837209302325582
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.001728542259591956, insert, 0.9115384615384615, 0.6000000000000001, 0.88
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0017279464160002318, insert, 1.0, 1.5, 0.8205128205128205
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0017279464160002318, insert, 1.0, 1.5, 0.8205128205128205
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.001726275147389298, insert, 0.9115384615384615, 0.6000000000000001, 0.8780487804878049
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0017227327845726452, insert, 0.9115384615384615, 0.6000000000000001, 0.875
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0017190087621243688, insert, 0.9115384615384615, 0.6000000000000001, 0.8717948717948718
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0017164181378125243, insert, 0.9115384615384615, 0.6000000000000001, 0.8695652173913043
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.0017140011404492394, insert, 1.0, 1.5, 0.8085106382978723
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0017140011404492394, insert, 1.0, 1.5, 0.8085106382978723
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.001710956821695663, insert, 0.9115384615384615, 0.6000000000000001, 0.8648648648648649
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.001709529432256029, insert, 0.9115384615384615, 0.6000000000000001, 0.8636363636363636
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0017041126723312632, insert, 1.0, 1.5, 0.8
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0017041126723312632, insert, 1.0, 1.5, 0.8
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.0017019846595036766, insert, 0.9115384615384615, 0.6000000000000001, 0.8571428571428571
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0016949214679908365, insert, 0.9115384615384615, 0.6000000000000001, 0.851063829787234
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0016936854094760894, insert, 0.9115384615384615, 0.6000000000000001, 0.85
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0016933043467139404, insert, 1.0, 1.5, 0.7906976744186046
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0016933043467139404, insert, 1.0, 1.5, 0.7906976744186046
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0016900290965268724, insert, 1.0, 1.5, 0.7878787878787878
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.0016900290965268724, insert, 1.0, 1.5, 0.7878787878787878
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.00168723043723241, insert, 0.9115384615384615, 0.6000000000000001, 0.8444444444444444
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0016845125541824402, insert, 0.9115384615384615, 0.6000000000000001, 0.8421052631578947
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.001682066459437467, insert, 0.9115384615384615, 0.6000000000000001, 0.84
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0016814415503046832, insert, 1.0, 1.5, 0.7804878048780488
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0016814415503046832, insert, 1.0, 1.5, 0.7804878048780488
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0016788239617522703, insert, 0.9115384615384615, 0.6000000000000001, 0.8372093023255814
Math,SIMPLE_NAME, line no: 68,length,SIMPLE_NAME, line no: 50, 0.0016749938347718864, insert, 0.03514180024660912, 0.0, 0.3333333333333333
num.value,QUALIFIED_NAME, line no: 68,mainClass,SIMPLE_NAME, line no: 48, 0.0016749938347718864, insert, 0.03329223181257707, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 65,args,SIMPLE_NAME, line no: 50, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 65,length,SIMPLE_NAME, line no: 50, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 65,System,SIMPLE_NAME, line no: 53, 0.0016749260628465803, insert, 0.01170671595810228, 0.0, 0.3333333333333333
format,SIMPLE_NAME, line no: 65,out,SIMPLE_NAME, line no: 56, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
num,SIMPLE_NAME, line no: 68,out,SIMPLE_NAME, line no: 56, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
value,SIMPLE_NAME, line no: 68,length,SIMPLE_NAME, line no: 50, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 203,args,SIMPLE_NAME, line no: 50, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 203,length,SIMPLE_NAME, line no: 50, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 203,System,SIMPLE_NAME, line no: 53, 0.0016749260628465803, insert, 0.01170671595810228, 0.0, 0.3333333333333333
format,SIMPLE_NAME, line no: 203,out,SIMPLE_NAME, line no: 56, 0.0016749260628465803, insert, 0.03512014787430684, 0.0, 0.3333333333333333
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0016743204927450522, insert, 0.9115384615384615, 0.6000000000000001, 0.8333333333333334
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0016695973423228481, insert, 0.9115384615384615, 0.6000000000000001, 0.8292682926829268
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.001665900963731558, insert, 0.9115384615384615, 0.6000000000000001, 0.8260869565217391
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.0016645587998593578, insert, 1.0, 1.5, 0.7659574468085106
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.0016645587998593578, insert, 1.0, 1.5, 0.7659574468085106
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.0016594244029519468, insert, 0.9115384615384615, 0.6000000000000001, 0.8205128205128205
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0016567160229895642, insert, 0.9115384615384615, 0.6000000000000001, 0.8181818181818182
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0016524728943818308, insert, 1.0, 1.5, 0.7555555555555555
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0016524728943818308, insert, 1.0, 1.5, 0.7555555555555555
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.001646656325986428, insert, 0.9115384615384615, 0.6000000000000001, 0.8095238095238095
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.0016454791274009546, insert, 0.9115384615384615, 0.6000000000000001, 0.8085106382978723
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0016392627186273252, insert, 1.0, 1.5, 0.7441860465116279
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0016392627186273252, insert, 1.0, 1.5, 0.7441860465116279
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.0016377186721105647, insert, 1.0, 1.5, 0.7428571428571429
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.0016377186721105647, insert, 1.0, 1.5, 0.7428571428571429
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.001635590659282978, insert, 0.9115384615384615, 0.6000000000000001, 0.8
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.001635590659282978, insert, 0.9115384615384615, 0.6000000000000001, 0.8
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.001635590659282978, insert, 0.9115384615384615, 0.6000000000000001, 0.8
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0016259082009174597, insert, 0.9115384615384615, 0.6000000000000001, 0.7916666666666666
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0016247823336656552, insert, 0.9115384615384615, 0.6000000000000001, 0.7906976744186046
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.0016215070834785874, insert, 0.9115384615384615, 0.6000000000000001, 0.7878787878787878
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0016153837896505916, insert, 0.9115384615384615, 0.6000000000000001, 0.782608695652174
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.001615116459269476, insert, 1.0, 1.5, 0.723404255319149
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 0.001615116459269476, insert, 1.0, 1.5, 0.723404255319149
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.001612919537256398, insert, 0.9115384615384615, 0.6000000000000001, 0.7804878048780488
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0016039026137230992, insert, 0.9115384615384615, 0.6000000000000001, 0.7727272727272727
String,SIMPLE_NAME, line no: 65,util,SIMPLE_NAME, line no: 44, 0.0016035705483672211, insert, 0.0012322858903265558, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 203,util,SIMPLE_NAME, line no: 44, 0.0016035705483672211, insert, 0.0012322858903265558, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 65,in,SIMPLE_NAME, line no: 53, 0.00160164202094886, insert, 0.01170671595810228, 0.0, 0.3333333333333333
num,SIMPLE_NAME, line no: 68,in,SIMPLE_NAME, line no: 53, 0.00160164202094886, insert, 0.01170671595810228, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 203,in,SIMPLE_NAME, line no: 53, 0.00160164202094886, insert, 0.01170671595810228, 0.0, 0.3333333333333333
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.0016008331164323987, insert, 1.0, 1.5, 0.7111111111111111
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.0016008331164323987, insert, 1.0, 1.5, 0.7111111111111111
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0015960367868110726, insert, 0.9115384615384615, 0.6000000000000001, 0.7659574468085106
num.value,QUALIFIED_NAME, line no: 68,absnum.value,QUALIFIED_NAME, line no: 68, 0.001593287607891492, insert, 0.9993834771886559, 0.6666666666666666, 0.75
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.001591327992469179, insert, 0.9115384615384615, 0.6000000000000001, 0.7619047619047619
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 0.001591063428712236, insert, 1.0, 1.5, 0.7027027027027027
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.001591063428712236, insert, 1.0, 1.5, 0.7027027027027027
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.001589114859128489, insert, 0.9115384615384615, 0.6000000000000001, 0.76
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0015839508813335458, insert, 0.9115384615384615, 0.6000000000000001, 0.7555555555555555
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0015774959090898667, insert, 0.9115384615384615, 0.6000000000000001, 0.75
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.00157074070557904, insert, 0.9115384615384615, 0.6000000000000001, 0.7441860465116279
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.0015691966590622795, insert, 0.9115384615384615, 0.6000000000000001, 0.7428571428571429
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.001565674118679594, insert, 1.0, 1.5, 0.6808510638297872
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 0.001565674118679594, insert, 1.0, 1.5, 0.6808510638297872
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0015648666155696253, insert, 0.9115384615384615, 0.6000000000000001, 0.7391304347826086
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0015510892044566344, insert, 0.9115384615384615, 0.6000000000000001, 0.7272727272727273
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 0.0015491933384829666, insert, 1.0, 1.5, 0.6666666666666666
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.0015491933384829666, insert, 1.0, 1.5, 0.6666666666666666
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0015465944462211907, insert, 0.9115384615384615, 0.6000000000000001, 0.723404255319149
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.0015452210478714718, insert, 0.9115384615384615, 0.6000000000000001, 0.7222222222222222
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.0015426390589740001, insert, 0.9115384615384615, 0.6000000000000001, 0.72
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.0015323111033841137, insert, 0.9115384615384615, 0.6000000000000001, 0.7111111111111111
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0015290836172622742, insert, 0.9115384615384615, 0.6000000000000001, 0.7083333333333334
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.001522541415663951, insert, 0.9115384615384615, 0.6000000000000001, 0.7027027027027027
nextDouble,SIMPLE_NAME, line no: 66,exec,SIMPLE_NAME, line no: 55, 0.0015165641183723798, insert, 0.0345252774352651, 0.0, 0.3
nextDouble,SIMPLE_NAME, line no: 66,println,SIMPLE_NAME, line no: 56, 0.0015165641183723798, insert, 0.0345252774352651, 0.0, 0.3
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.0015143494414886591, insert, 0.9115384615384615, 0.6000000000000001, 0.6956521739130435
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 0.0015114081351053333, insert, 1.0, 1.5, 0.6341463414634146
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.0015114081351053333, insert, 1.0, 1.5, 0.6341463414634146
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 0.0015010554483094573, insert, 0.9115384615384615, 0.6000000000000001, 0.6842105263157895
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 0.001497152105631309, insert, 0.9115384615384615, 0.6000000000000001, 0.6808510638297872
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.0014961632588195114, insert, 0.9115384615384615, 0.6000000000000001, 0.68
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0014867258651570406, insert, 1.0, 1.6, 0.6129032258064516
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0014806713254346814, insert, 0.9115384615384615, 0.6000000000000001, 0.6666666666666666
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.0014806713254346814, insert, 0.9115384615384615, 0.6000000000000001, 0.6666666666666666
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 0.0014771378343674797, insert, 1.0, 1.5, 0.6046511627906976
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.0014771378343674797, insert, 1.0, 1.5, 0.6046511627906976
num.value,QUALIFIED_NAME, line no: 68,floatnum.value,QUALIFIED_NAME, line no: 66, 0.0014727518936057777, insert, 0.9993834771886559, 0.0, 0.6428571428571429
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 0.0014613064087036446, insert, 0.9115384615384615, 0.6000000000000001, 0.65
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0014580643185722038, insert, 1.0, 1.5, 0.5882352941176471
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0014580643185722038, insert, 1.0, 1.5, 0.5882352941176471
scanner,SIMPLE_NAME, line no: 66,args,SIMPLE_NAME, line no: 50, 0.0014514224062004578, insert, 0.03514180024660912, 0.0, 0.2857142857142857
scanner,SIMPLE_NAME, line no: 66,System,SIMPLE_NAME, line no: 53, 0.0014514224062004578, insert, 0.011713933415536375, 0.0, 0.2857142857142857
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.0014496874586650223, insert, 0.9115384615384615, 0.6000000000000001, 0.64
scanner,SIMPLE_NAME, line no: 66,println,SIMPLE_NAME, line no: 56, 0.001449492689800951, insert, 0.0345252774352651, 0.0, 0.2857142857142857
format,SIMPLE_NAME, line no: 65,println,SIMPLE_NAME, line no: 56, 0.0014494261068567905, insert, 0.03450400492914356, 0.0, 0.2857142857142857
format,SIMPLE_NAME, line no: 203,println,SIMPLE_NAME, line no: 56, 0.0014494261068567905, insert, 0.03450400492914356, 0.0, 0.2857142857142857
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 0.001445913782584102, insert, 1.0, 1.5, 0.5777777777777777
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.001445913782584102, insert, 1.0, 1.5, 0.5777777777777777
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.001443566519950037, insert, 1.0, 1.6, 0.5757575757575758
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.0014428861220570483, insert, 0.9115384615384615, 0.6000000000000001, 0.6341463414634146
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0014385366714484691, insert, 1.0, 1.5, 0.5714285714285714
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 0.0014253429919174325, insert, 0.9115384615384615, 0.6000000000000001, 0.6190476190476191
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 0.001417347096909948, insert, 1.0, 1.5, 0.5531914893617021
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 0.001417347096909948, insert, 1.0, 1.5, 0.5531914893617021
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.0014086158213191947, insert, 0.9115384615384615, 0.6000000000000001, 0.6046511627906976
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0014053396713381197, insert, 1.0, 1.6, 0.5428571428571428
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.001402648022680524, insert, 1.0, 1.5, 0.5405405405405406
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 0.0013926489766572403, insert, 0.9115384615384615, 0.6000000000000001, 0.5909090909090909
String,SIMPLE_NAME, line no: 65,Scanner,SIMPLE_NAME, line no: 44, 0.0013780705923774313, insert, 6.161429451632779E-4, 0.0, 0.2857142857142857
value,SIMPLE_NAME, line no: 68,Scanner,SIMPLE_NAME, line no: 44, 0.0013780705923774313, insert, 6.161429451632779E-4, 0.0, 0.2857142857142857
String,SIMPLE_NAME, line no: 203,Scanner,SIMPLE_NAME, line no: 44, 0.0013780705923774313, insert, 6.161429451632779E-4, 0.0, 0.2857142857142857
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.001377391769535817, insert, 0.9115384615384615, 0.6000000000000001, 0.5777777777777777
value,SIMPLE_NAME, line no: 68,num.value,QUALIFIED_NAME, line no: 67, 0.0013745378927911274, insert, 0.9987677141096735, 1.0, 0.5555555555555556
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0013712454550085717, insert, 1.0, 1.6, 0.5135135135135135
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.001370440260965701, insert, 1.0, 1.5, 0.5128205128205128
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 0.00136279791924576, insert, 0.9115384615384615, 0.6000000000000001, 0.5652173913043478
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 0.001348825083861663, insert, 0.9115384615384615, 0.6000000000000001, 0.5531914893617021
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0013413747199059831, insert, 1.0, 1.5, 0.4878048780487805
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0013406480813794902, insert, 1.0, 1.6, 0.48717948717948717
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 0.0013354344499519031, insert, 0.9115384615384615, 0.6000000000000001, 0.5416666666666666
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0013150129501076344, insert, 1.0, 1.5, 0.46511627906976744
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0013130358173727584, insert, 1.0, 1.6, 0.4634146341463415
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 0.0013102600582015553, insert, 0.9115384615384615, 0.6000000000000001, 0.52
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0012909944487358056, insert, 1.0, 1.5, 0.4444444444444444
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0012879921360643269, insert, 1.0, 1.6, 0.4418604651162791
Math,SIMPLE_NAME, line no: 68,args,SIMPLE_NAME, line no: 50, 0.0012837438347718865, insert, 0.03514180024660912, 0.0, 0.25
Math,SIMPLE_NAME, line no: 68,out,SIMPLE_NAME, line no: 56, 0.0012837438347718865, insert, 0.03514180024660912, 0.0, 0.25
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 0.0012690200751403024, insert, 1.0, 1.5, 0.425531914893617
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0012651745597610892, insert, 1.0, 1.6, 0.4222222222222222
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,value=i; ,EXPRESSION_STATEMENT, line no: 7, 0.0012633562253326494, insert, 0.0024706609017912293, 0.0, 0.1016949152542373
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 0.0012442989048453614, insert, 1.0, 1.6, 0.40425531914893614
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,value=i; ,EXPRESSION_STATEMENT, line no: 7, 0.0012426358863495985, insert, 0.0024706609017912293, 0.0, 0.1
value,SIMPLE_NAME, line no: 68,absnum.value,QUALIFIED_NAME, line no: 68, 0.0012178257855822551, insert, 0.9987677141096735, 1.0, 0.4166666666666667
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0012142326166488116, insert, 1.0, 0.0, 0.3783783783783784
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0012142326166488116, insert, 1.0, 0.0, 0.3783783783783784
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0012142326166488116, insert, 1.0, 0.0, 0.3783783783783784
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0012142326166488116, insert, 1.0, 0.0, 0.3783783783783784
Math,SIMPLE_NAME, line no: 68,java,SIMPLE_NAME, line no: 44, 0.0012123443279901357, insert, 0.0012330456226880395, 0.0, 0.25
Math,SIMPLE_NAME, line no: 68,util,SIMPLE_NAME, line no: 44, 0.0012123443279901357, insert, 0.0012330456226880395, 0.0, 0.25
abs,SIMPLE_NAME, line no: 68,java,SIMPLE_NAME, line no: 44, 0.0012123443279901357, insert, 0.0012330456226880395, 0.0, 0.25
num,SIMPLE_NAME, line no: 68,util,SIMPLE_NAME, line no: 44, 0.0012123205483672212, insert, 0.0012322858903265558, 0.0, 0.25
nextDouble,SIMPLE_NAME, line no: 66,num.value,QUALIFIED_NAME, line no: 67, 0.0012, insert, 0.9993834771886559, 0.0, 0.4
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.001191687183448436, insert, 1.0, 0.0, 0.358974358974359
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0011713413047066334, insert, 1.0, 0.0, 0.34146341463414637
scanner,SIMPLE_NAME, line no: 66,mainClass,SIMPLE_NAME, line no: 48, 0.0011533271681052198, insert, 0.03329223181257707, 0.0, 0.2222222222222222
abs,SIMPLE_NAME, line no: 68,mainClass,SIMPLE_NAME, line no: 48, 0.0011533271681052198, insert, 0.03329223181257707, 0.0, 0.2222222222222222
num.value,QUALIFIED_NAME, line no: 68,length,SIMPLE_NAME, line no: 50, 0.0011533271681052198, insert, 0.03514180024660912, 0.0, 0.2222222222222222
String,SIMPLE_NAME, line no: 65,mainClass,SIMPLE_NAME, line no: 48, 0.0011532593961799138, insert, 0.033271719038817, 0.0, 0.2222222222222222
format,SIMPLE_NAME, line no: 65,mainClass,SIMPLE_NAME, line no: 48, 0.0011532593961799138, insert, 0.033271719038817, 0.0, 0.2222222222222222
value,SIMPLE_NAME, line no: 68,mainClass,SIMPLE_NAME, line no: 48, 0.0011532593961799138, insert, 0.033271719038817, 0.0, 0.2222222222222222
String,SIMPLE_NAME, line no: 203,mainClass,SIMPLE_NAME, line no: 48, 0.0011532593961799138, insert, 0.033271719038817, 0.0, 0.2222222222222222
format,SIMPLE_NAME, line no: 203,mainClass,SIMPLE_NAME, line no: 48, 0.0011532593961799138, insert, 0.033271719038817, 0.0, 0.2222222222222222
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0011528880658477892, insert, 1.0, 0.0, 0.32558139534883723
num.value,QUALIFIED_NAME, line no: 68,println,SIMPLE_NAME, line no: 56, 0.0011513974517057132, insert, 0.0345252774352651, 0.0, 0.2222222222222222
value,SIMPLE_NAME, line no: 68,floatnum.value,QUALIFIED_NAME, line no: 66, 0.0011508614998679693, insert, 0.9987677141096735, 0.0, 0.35714285714285715
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0011360751148875089, insert, 1.0, 0.0, 0.3111111111111111
num,SIMPLE_NAME, line no: 68,num.value,QUALIFIED_NAME, line no: 67, 0.0011245378927911276, insert, 0.9987677141096735, 1.0, 0.3333333333333333
nextDouble,SIMPLE_NAME, line no: 66,absnum.value,QUALIFIED_NAME, line no: 68, 0.001124537607891492, insert, 0.9993834771886559, 0.0, 0.3333333333333333
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 0.0011206930533706565, insert, 1.0, 0.0, 0.2978723404255319
num.value,QUALIFIED_NAME, line no: 68,d9.value,QUALIFIED_NAME, line no: 78, 0.0011199136868064118, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d10.value,QUALIFIED_NAME, line no: 79, 0.0011199136868064118, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d8.value,QUALIFIED_NAME, line no: 77, 0.001119451294697904, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d7.value,QUALIFIED_NAME, line no: 76, 0.0011189889025893958, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d6.value,QUALIFIED_NAME, line no: 75, 0.0011185265104808877, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d5.value,QUALIFIED_NAME, line no: 74, 0.0011180641183723796, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d4.value,QUALIFIED_NAME, line no: 73, 0.0011176017262638717, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d3.value,QUALIFIED_NAME, line no: 72, 0.0011171393341553636, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d2.value,QUALIFIED_NAME, line no: 71, 0.0011166769420468555, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,d1.value,QUALIFIED_NAME, line no: 70, 0.0011162145499383476, insert, 0.4395807644882861, 0.6666666666666666, 0.6666666666666666
num.value,QUALIFIED_NAME, line no: 68,java,SIMPLE_NAME, line no: 44, 0.0010819276613234692, insert, 0.0012330456226880395, 0.0, 0.2222222222222222
num.value,QUALIFIED_NAME, line no: 68,util,SIMPLE_NAME, line no: 44, 0.0010819276613234692, insert, 0.0012330456226880395, 0.0, 0.2222222222222222
num.value,QUALIFIED_NAME, line no: 68,Scanner,SIMPLE_NAME, line no: 44, 0.0010799979449239623, insert, 6.165228113440197E-4, 0.0, 0.2222222222222222
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010766893702456619, insert, 1.0, 0.0, 0.26
value,SIMPLE_NAME, line no: 68,d9.value,QUALIFIED_NAME, line no: 78, 0.0010728107670979667, insert, 0.43930991990141716, 1.0, 0.625
value,SIMPLE_NAME, line no: 68,d8.value,QUALIFIED_NAME, line no: 77, 0.0010723486598890944, insert, 0.43930991990141716, 1.0, 0.625
value,SIMPLE_NAME, line no: 68,d7.value,QUALIFIED_NAME, line no: 76, 0.0010718865526802219, insert, 0.43930991990141716, 1.0, 0.625
value,SIMPLE_NAME, line no: 68,d6.value,QUALIFIED_NAME, line no: 75, 0.0010714244454713493, insert, 0.43930991990141716, 1.0, 0.625
nextDouble,SIMPLE_NAME, line no: 66,floatnum.value,QUALIFIED_NAME, line no: 66, 0.0010709661793200634, insert, 0.9993834771886559, 0.0, 0.2857142857142857
value,SIMPLE_NAME, line no: 68,d5.value,QUALIFIED_NAME, line no: 74, 0.0010709623382624768, insert, 0.43930991990141716, 1.0, 0.625
format,SIMPLE_NAME, line no: 65,floatnum.value,QUALIFIED_NAME, line no: 66, 0.0010705043570108264, insert, 0.9987677141096735, 0.0, 0.2857142857142857
format,SIMPLE_NAME, line no: 203,floatnum.value,QUALIFIED_NAME, line no: 66, 0.0010705043570108264, insert, 0.9987677141096735, 0.0, 0.2857142857142857
value,SIMPLE_NAME, line no: 68,d4.value,QUALIFIED_NAME, line no: 73, 0.0010705002310536045, insert, 0.43930991990141716, 1.0, 0.625
value,SIMPLE_NAME, line no: 68,d3.value,QUALIFIED_NAME, line no: 72, 0.001070038123844732, insert, 0.43930991990141716, 1.0, 0.625
value,SIMPLE_NAME, line no: 68,d2.value,QUALIFIED_NAME, line no: 71, 0.0010695760166358596, insert, 0.43930991990141716, 1.0, 0.625
value,SIMPLE_NAME, line no: 68,d1.value,QUALIFIED_NAME, line no: 70, 0.001069113909426987, insert, 0.43930991990141716, 1.0, 0.625
"\nEnter an integer > ",STRING_LITERAL, line no: 65,Scanner,SIMPLE_NAME, line no: 44, 0.0010572941948619036, insert, 6.161429451632779E-4, 0.0, 0.21739130434782608
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 0.0010534514701684174, insert, 1.0, 0.0, 0.24
nextDouble,SIMPLE_NAME, line no: 66,mainClass,SIMPLE_NAME, line no: 48, 0.0010489938347718866, insert, 0.03329223181257707, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,length,SIMPLE_NAME, line no: 50, 0.0010489938347718866, insert, 0.03514180024660912, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,System,SIMPLE_NAME, line no: 53, 0.0010489938347718866, insert, 0.011713933415536375, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,out,SIMPLE_NAME, line no: 56, 0.0010489938347718866, insert, 0.03514180024660912, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,args,SIMPLE_NAME, line no: 50, 0.0010489260628465805, insert, 0.03512014787430684, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,out,SIMPLE_NAME, line no: 56, 0.0010489260628465805, insert, 0.03512014787430684, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,exec,SIMPLE_NAME, line no: 55, 0.0010469975354282194, insert, 0.03450400492914356, 0.0, 0.2
scanner,SIMPLE_NAME, line no: 66,absnum.value,QUALIFIED_NAME, line no: 68, 0.001030787607891492, insert, 0.9993834771886559, 0.0, 0.25
abs,SIMPLE_NAME, line no: 68,absnum.value,QUALIFIED_NAME, line no: 68, 0.001030787607891492, insert, 0.9993834771886559, 0.0, 0.25
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 0.0010306074328043464, insert, 1.0, 0.0, 0.22033898305084745
num,SIMPLE_NAME, line no: 68,absnum.value,QUALIFIED_NAME, line no: 68, 0.0010303257855822552, insert, 0.9987677141096735, 0.0, 0.25
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.0010189203850069044, insert, 0.9115384615384615, 3.0, 0.2102803738317757
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 0.001008061553195108, insert, 0.9115384615384615, 3.0, 0.20093457943925233
scanner,SIMPLE_NAME, line no: 66,num.value,QUALIFIED_NAME, line no: 67, 0.001, insert, 0.9993834771886559, 0.0, 0.2222222222222222
format,SIMPLE_NAME, line no: 65,num.value,QUALIFIED_NAME, line no: 67, 9.995378927911275E-4, insert, 0.9987677141096735, 0.0, 0.2222222222222222
format,SIMPLE_NAME, line no: 203,num.value,QUALIFIED_NAME, line no: 67, 9.995378927911275E-4, insert, 0.9987677141096735, 0.0, 0.2222222222222222
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.972027213833114E-4, insert, 0.9115384615384615, 3.0, 0.19158878504672897
value,SIMPLE_NAME, line no: 68,d10.value,QUALIFIED_NAME, line no: 79, 9.946857670979669E-4, insert, 0.43930991990141716, 1.0, 0.5555555555555556
scanner,SIMPLE_NAME, line no: 66,floatnum.value,QUALIFIED_NAME, line no: 66, 9.906090364629207E-4, insert, 0.9993834771886559, 0.0, 0.21428571428571427
num,SIMPLE_NAME, line no: 68,floatnum.value,QUALIFIED_NAME, line no: 66, 9.901472141536835E-4, insert, 0.9987677141096735, 0.0, 0.21428571428571427
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.86343889571515E-4, insert, 0.9115384615384615, 3.0, 0.1822429906542056
nextDouble,SIMPLE_NAME, line no: 66,util,SIMPLE_NAME, line no: 44, 9.775943279901355E-4, insert, 0.0012330456226880395, 0.0, 0.2
value,SIMPLE_NAME, line no: 68,util,SIMPLE_NAME, line no: 44, 9.775705483672213E-4, insert, 0.0012322858903265558, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,Scanner,SIMPLE_NAME, line no: 44, 9.756646115906289E-4, insert, 6.165228113440197E-4, 0.0, 0.2
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.754850577597186E-4, insert, 0.9115384615384615, 3.0, 0.17289719626168223
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.64626225947922E-4, insert, 0.9115384615384615, 3.0, 0.16355140186915887
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.537673941361255E-4, insert, 0.9115384615384615, 3.0, 0.1542056074766355
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.429085623243289E-4, insert, 0.9115384615384615, 3.0, 0.14485981308411214
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (floatnum.value >= 10000000000L) {   output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); } ,IF_STATEMENT, line no: 200, 9.419417475728156E-4, insert, 1.0, 1.0, 0.3300970873786408
format,SIMPLE_NAME, line no: 65,absnum.value,QUALIFIED_NAME, line no: 68, 9.36575785582255E-4, insert, 0.9987677141096735, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,absnum.value,QUALIFIED_NAME, line no: 68, 9.36575785582255E-4, insert, 0.9987677141096735, 0.0, 0.16666666666666666
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,floatnum.value,QUALIFIED_NAME, line no: 66, 9.248570355822551E-4, insert, 0.9987677141096735, 0.0, 0.15625
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,absnum.value,QUALIFIED_NAME, line no: 68, 9.248570355822551E-4, insert, 0.9987677141096735, 0.0, 0.15625
"\nEnter an integer > ",STRING_LITERAL, line no: 65,println,SIMPLE_NAME, line no: 56, 9.245192745586542E-4, insert, 0.03450400492914356, 0.0, 0.17391304347826086
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (floatnum.value >= 10000000000L) {   output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); } ,IF_STATEMENT, line no: 200, 9.235922330097087E-4, insert, 1.0, 1.0, 0.3106796116504854
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 9.157614827948377E-4, insert, 0.9115384615384615, 3.0, 0.12149532710280374
Math,SIMPLE_NAME, line no: 68,floatnum.value,QUALIFIED_NAME, line no: 66, 9.102518936057776E-4, insert, 0.9993834771886559, 0.0, 0.14285714285714285
String,SIMPLE_NAME, line no: 65,floatnum.value,QUALIFIED_NAME, line no: 66, 9.097900712965408E-4, insert, 0.9987677141096735, 0.0, 0.14285714285714285
String,SIMPLE_NAME, line no: 203,floatnum.value,QUALIFIED_NAME, line no: 66, 9.097900712965408E-4, insert, 0.9987677141096735, 0.0, 0.14285714285714285
"\nEnter an integer > ",STRING_LITERAL, line no: 65,num.value,QUALIFIED_NAME, line no: 67, 8.962770232259101E-4, insert, 0.9987677141096735, 0.0, 0.13043478260869565
"\nEnter an integer > ",STRING_LITERAL, line no: 65,floatnum.value,QUALIFIED_NAME, line no: 66, 8.958149160170377E-4, insert, 0.9987677141096735, 0.0, 0.13043478260869565
"\nEnter an integer > ",STRING_LITERAL, line no: 65,absnum.value,QUALIFIED_NAME, line no: 68, 8.958149160170377E-4, insert, 0.9987677141096735, 0.0, 0.13043478260869565
Math,SIMPLE_NAME, line no: 68,System,SIMPLE_NAME, line no: 53, 8.924938347718866E-4, insert, 0.011713933415536375, 0.0, 0.16666666666666666
abs,SIMPLE_NAME, line no: 68,System,SIMPLE_NAME, line no: 53, 8.924938347718866E-4, insert, 0.011713933415536375, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 65,out,SIMPLE_NAME, line no: 56, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,args,SIMPLE_NAME, line no: 50, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,length,SIMPLE_NAME, line no: 50, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,System,SIMPLE_NAME, line no: 53, 8.924260628465804E-4, insert, 0.01170671595810228, 0.0, 0.16666666666666666
num,SIMPLE_NAME, line no: 68,length,SIMPLE_NAME, line no: 50, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
num,SIMPLE_NAME, line no: 68,System,SIMPLE_NAME, line no: 53, 8.924260628465804E-4, insert, 0.01170671595810228, 0.0, 0.16666666666666666
value,SIMPLE_NAME, line no: 68,System,SIMPLE_NAME, line no: 53, 8.924260628465804E-4, insert, 0.01170671595810228, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,out,SIMPLE_NAME, line no: 56, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,args,SIMPLE_NAME, line no: 50, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,length,SIMPLE_NAME, line no: 50, 8.924260628465804E-4, insert, 0.03512014787430684, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,System,SIMPLE_NAME, line no: 53, 8.924260628465804E-4, insert, 0.01170671595810228, 0.0, 0.16666666666666666
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (true) return; ,IF_STATEMENT, line no: 204, 8.854054054054055E-4, insert, 1.0, 0.0, 0.2702702702702703
Math,SIMPLE_NAME, line no: 68,num.value,QUALIFIED_NAME, line no: 67, 8.75E-4, insert, 0.9993834771886559, 0.0, 0.1111111111111111
abs,SIMPLE_NAME, line no: 68,num.value,QUALIFIED_NAME, line no: 67, 8.75E-4, insert, 0.9993834771886559, 0.0, 0.1111111111111111
String,SIMPLE_NAME, line no: 65,num.value,QUALIFIED_NAME, line no: 67, 8.745378927911275E-4, insert, 0.9987677141096735, 0.0, 0.1111111111111111
String,SIMPLE_NAME, line no: 203,num.value,QUALIFIED_NAME, line no: 67, 8.745378927911275E-4, insert, 0.9987677141096735, 0.0, 0.1111111111111111
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,num.value,QUALIFIED_NAME, line no: 67, 8.550066427911275E-4, insert, 0.9987677141096735, 0.0, 0.09375
scanner,SIMPLE_NAME, line no: 66,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 8.474501914465572E-4, insert, 0.03329223181257707, 0.0, 0.15789473684210525
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (true) return; ,IF_STATEMENT, line no: 204, 8.433870967741936E-4, insert, 1.0, 0.0, 0.22580645161290322
Math,SIMPLE_NAME, line no: 68,absnum.value,QUALIFIED_NAME, line no: 68, 8.43287607891492E-4, insert, 0.9993834771886559, 0.0, 0.08333333333333333
String,SIMPLE_NAME, line no: 65,absnum.value,QUALIFIED_NAME, line no: 68, 8.42825785582255E-4, insert, 0.9987677141096735, 0.0, 0.08333333333333333
String,SIMPLE_NAME, line no: 203,absnum.value,QUALIFIED_NAME, line no: 68, 8.42825785582255E-4, insert, 0.9987677141096735, 0.0, 0.08333333333333333
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 8.396627580098584E-4, insert, 0.033271719038817, 0.0, 0.15625
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (floatnum.value >= 10000000000L) {   output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); } ,IF_STATEMENT, line no: 200, 8.318446601941747E-4, insert, 1.0, 1.5, 0.21359223300970873
abs,SIMPLE_NAME, line no: 68,floatnum.value,QUALIFIED_NAME, line no: 66, 8.298947507486349E-4, insert, 0.9993834771886559, 0.0, 0.07142857142857142
format,SIMPLE_NAME, line no: 65,java,SIMPLE_NAME, line no: 44, 8.210705483672211E-4, insert, 0.0012322858903265558, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 65,util,SIMPLE_NAME, line no: 44, 8.210705483672211E-4, insert, 0.0012322858903265558, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,java,SIMPLE_NAME, line no: 44, 8.210705483672211E-4, insert, 0.0012322858903265558, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,util,SIMPLE_NAME, line no: 44, 8.210705483672211E-4, insert, 0.0012322858903265558, 0.0, 0.16666666666666666
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (true) return; ,IF_STATEMENT, line no: 204, 8.190000000000001E-4, insert, 1.0, 0.0, 0.2
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (floatnum.value >= 10000000000L) {   output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); } ,IF_STATEMENT, line no: 200, 8.134951456310679E-4, insert, 1.0, 1.2000000000000002, 0.1941747572815534
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (floatnum.value >= 10000000000L) {   output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); } ,IF_STATEMENT, line no: 200, 8.043203883495146E-4, insert, 1.0, 0.0, 0.18446601941747573
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (true) return; ,IF_STATEMENT, line no: 204, 7.967647058823529E-4, insert, 1.0, 0.0, 0.17647058823529413
String,SIMPLE_NAME, line no: 65,i,SIMPLE_NAME, line no: 7, 7.940711645101664E-4, insert, 0.0036968576709796672, 0.0, 0.16666666666666666
String,SIMPLE_NAME, line no: 203,i,SIMPLE_NAME, line no: 7, 7.940711645101664E-4, insert, 0.0036968576709796672, 0.0, 0.16666666666666666
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (true) return; ,IF_STATEMENT, line no: 204, 7.901694915254237E-4, insert, 1.0, 0.0, 0.1694915254237288
scanner,SIMPLE_NAME, line no: 66,length,SIMPLE_NAME, line no: 50, 7.807081204861722E-4, insert, 0.03514180024660912, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,exec,SIMPLE_NAME, line no: 55, 7.787784040866654E-4, insert, 0.0345252774352651, 0.0, 0.14285714285714285
Math,SIMPLE_NAME, line no: 68,println,SIMPLE_NAME, line no: 56, 7.787784040866654E-4, insert, 0.0345252774352651, 0.0, 0.14285714285714285
num,SIMPLE_NAME, line no: 68,println,SIMPLE_NAME, line no: 56, 7.787118211425051E-4, insert, 0.03450400492914356, 0.0, 0.14285714285714285
value,SIMPLE_NAME, line no: 68,println,SIMPLE_NAME, line no: 56, 7.787118211425051E-4, insert, 0.03450400492914356, 0.0, 0.14285714285714285
value,SIMPLE_NAME, line no: 68,true,BOOLEAN_LITERAL, line no: 204, 7.508416512630932E-4, insert, 0.9975354282193469, 0.0, 0.4
"\nEnter an integer > ",STRING_LITERAL, line no: 65,mainClass,SIMPLE_NAME, line no: 48, 7.223173671944065E-4, insert, 0.033271719038817, 0.0, 0.13043478260869565
"\nEnter an integer > ",STRING_LITERAL, line no: 65,length,SIMPLE_NAME, line no: 50, 7.223173671944065E-4, insert, 0.03512014787430684, 0.0, 0.13043478260869565
"\nEnter an integer > ",STRING_LITERAL, line no: 65,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 7.184603123576844E-4, insert, 0.033271719038817, 0.0, 0.13043478260869565
scanner,SIMPLE_NAME, line no: 66,java,SIMPLE_NAME, line no: 44, 7.093086137044212E-4, insert, 0.0012330456226880395, 0.0, 0.14285714285714285
scanner,SIMPLE_NAME, line no: 66,in,SIMPLE_NAME, line no: 53, 7.073788973049144E-4, insert, 0.011713933415536375, 0.0, 0.14285714285714285
Math,SIMPLE_NAME, line no: 68,Scanner,SIMPLE_NAME, line no: 44, 7.073788973049144E-4, insert, 6.165228113440197E-4, 0.0, 0.14285714285714285
abs,SIMPLE_NAME, line no: 68,Scanner,SIMPLE_NAME, line no: 44, 7.073788973049144E-4, insert, 6.165228113440197E-4, 0.0, 0.14285714285714285
format,SIMPLE_NAME, line no: 65,Scanner,SIMPLE_NAME, line no: 44, 7.073563066631459E-4, insert, 6.161429451632779E-4, 0.0, 0.14285714285714285
num,SIMPLE_NAME, line no: 68,Scanner,SIMPLE_NAME, line no: 44, 7.073563066631459E-4, insert, 6.161429451632779E-4, 0.0, 0.14285714285714285
format,SIMPLE_NAME, line no: 203,Scanner,SIMPLE_NAME, line no: 44, 7.073563066631459E-4, insert, 6.161429451632779E-4, 0.0, 0.14285714285714285
String,SIMPLE_NAME, line no: 65,true,BOOLEAN_LITERAL, line no: 204, 7.038416512630931E-4, insert, 0.9975354282193469, 0.0, 0.3333333333333333
String,SIMPLE_NAME, line no: 203,true,BOOLEAN_LITERAL, line no: 204, 7.038416512630931E-4, insert, 0.9975354282193469, 0.0, 0.3333333333333333
nextDouble,SIMPLE_NAME, line no: 66,true,BOOLEAN_LITERAL, line no: 204, 6.80630702836005E-4, insert, 0.9981504315659679, 0.0, 0.3
scanner,SIMPLE_NAME, line no: 66,d9.value,QUALIFIED_NAME, line no: 78, 6.511636868064118E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d8.value,QUALIFIED_NAME, line no: 77, 6.507012946979039E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d7.value,QUALIFIED_NAME, line no: 76, 6.502389025893957E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d6.value,QUALIFIED_NAME, line no: 75, 6.497765104808878E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d5.value,QUALIFIED_NAME, line no: 74, 6.493141183723797E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d4.value,QUALIFIED_NAME, line no: 73, 6.488517262638718E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d3.value,QUALIFIED_NAME, line no: 72, 6.483893341553637E-4, insert, 0.4395807644882861, 0.0, 0.25
scanner,SIMPLE_NAME, line no: 66,d2.value,QUALIFIED_NAME, line no: 71, 6.479269420468557E-4, insert, 0.4395807644882861, 0.0, 0.25
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 131, 6.477417640807652E-4, insert, 1.0, 1.0, 0.0187743535246192
scanner,SIMPLE_NAME, line no: 66,d1.value,QUALIFIED_NAME, line no: 70, 6.474645499383476E-4, insert, 0.4395807644882861, 0.0, 0.25
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 131, 6.460680127523911E-4, insert, 1.0, 1.0, 0.01700318809776833
Math,SIMPLE_NAME, line no: 68,true,BOOLEAN_LITERAL, line no: 204, 6.45380702836005E-4, insert, 0.9981504315659679, 0.0, 0.25
num,SIMPLE_NAME, line no: 68,true,BOOLEAN_LITERAL, line no: 204, 6.450916512630931E-4, insert, 0.9975354282193469, 0.0, 0.25
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 131, 6.410467587672689E-4, insert, 1.0, 0.0, 0.011689691817215728
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 131, 6.403772582359193E-4, insert, 1.0, 1.7333333333333334, 0.010981225646475381
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 131, 6.400425079702445E-4, insert, 1.0, 1.857142857142857, 0.010626992561105207
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (!(num.value >= 0 && absnum.value < 10000000000L)) {   d1.value=(absnum.value % 10);   d2.value=(absnum.value % 100) / 10;   d3.value=(absnum.value % 1000) / 100;   d4.value=(absnum.value % 10000) / 1000;   d5.value=(absnum.value % 100000) / 10000;   d6.value=(absnum.value % 1000000) / 100000;   d7.value=(absnum.value % 10000000) / 1000000;   d8.value=(absnum.value % 100000000) / 10000000;   d9.value=(absnum.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n-%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n-%d\n" d1.value));   } }  else if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 69, 6.39157981349424E-4, insert, 1.0, 1.0, 0.009690985554946059
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (!(num.value >= 0 && absnum.value < 10000000000L)) {   d1.value=(absnum.value % 10);   d2.value=(absnum.value % 100) / 10;   d3.value=(absnum.value % 1000) / 100;   d4.value=(absnum.value % 10000) / 1000;   d5.value=(absnum.value % 100000) / 10000;   d6.value=(absnum.value % 1000000) / 100000;   d7.value=(absnum.value % 10000000) / 1000000;   d8.value=(absnum.value % 100000000) / 10000000;   d9.value=(absnum.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n-%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n-%d\n" d1.value));   } }  else if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 69, 6.384668129456939E-4, insert, 1.0, 1.0, 0.008959590418723715
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (!(num.value >= 0 && absnum.value < 10000000000L)) {   d1.value=(absnum.value % 10);   d2.value=(absnum.value % 100) / 10;   d3.value=(absnum.value % 1000) / 100;   d4.value=(absnum.value % 10000) / 1000;   d5.value=(absnum.value % 100000) / 10000;   d6.value=(absnum.value % 1000000) / 100000;   d7.value=(absnum.value % 10000000) / 1000000;   d8.value=(absnum.value % 100000000) / 10000000;   d9.value=(absnum.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n-%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n-%d\n" d1.value));   } }  else if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 69, 6.357021393307735E-4, insert, 1.0, 0.0, 0.006034009873834339
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (!(num.value >= 0 && absnum.value < 10000000000L)) {   d1.value=(absnum.value % 10);   d2.value=(absnum.value % 100) / 10;   d3.value=(absnum.value % 1000) / 100;   d4.value=(absnum.value % 10000) / 1000;   d5.value=(absnum.value % 100000) / 10000;   d6.value=(absnum.value % 1000000) / 100000;   d7.value=(absnum.value % 10000000) / 1000000;   d8.value=(absnum.value % 100000000) / 10000000;   d9.value=(absnum.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n-%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n-%d\n" d1.value));   } }  else if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 69, 6.353565551289085E-4, insert, 1.0, 1.75, 0.005668312305723167
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (!(num.value >= 0 && absnum.value < 10000000000L)) {   d1.value=(absnum.value % 10);   d2.value=(absnum.value % 100) / 10;   d3.value=(absnum.value % 1000) / 100;   d4.value=(absnum.value % 10000) / 1000;   d5.value=(absnum.value % 100000) / 10000;   d6.value=(absnum.value % 1000000) / 100000;   d7.value=(absnum.value % 10000000) / 1000000;   d8.value=(absnum.value % 100000000) / 10000000;   d9.value=(absnum.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n-%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n-%d\n" d1.value));   } }  else if (num.value >= 0 && num.value < 10000000000L) {   d1.value=(num.value % 10);   d2.value=(num.value % 100) / 10;   d3.value=(num.value % 1000) / 100;   d4.value=(num.value % 10000) / 1000;   d5.value=(num.value % 100000) / 10000;   d6.value=(num.value % 1000000) / 100000;   d7.value=(num.value % 10000000) / 1000000;   d8.value=(num.value % 100000000) / 10000000;   d9.value=(num.value % 1000000000) / 100000000;   d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000);   if (d10.value == 0 && d9.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {     output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {     output+=(String.format("\n%d\n%d\n" d1.value d2.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {     output+=(String.format("\n%d\n" d1.value));   }  else   if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {     output+=(String.format("\n0\n"));   } } ,IF_STATEMENT, line no: 69, 6.353565551289085E-4, insert, 1.0, 3.0, 0.005668312305723167
Math,SIMPLE_NAME, line no: 68,mainClass,SIMPLE_NAME, line no: 48, 6.316605014385533E-4, insert, 0.03329223181257707, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,args,SIMPLE_NAME, line no: 50, 6.316605014385533E-4, insert, 0.03514180024660912, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,System,SIMPLE_NAME, line no: 53, 6.316605014385533E-4, insert, 0.011713933415536375, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,out,SIMPLE_NAME, line no: 56, 6.316605014385533E-4, insert, 0.03514180024660912, 0.0, 0.1111111111111111
num,SIMPLE_NAME, line no: 68,mainClass,SIMPLE_NAME, line no: 48, 6.315927295132471E-4, insert, 0.033271719038817, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,exec,SIMPLE_NAME, line no: 55, 6.297307850390465E-4, insert, 0.0345252774352651, 0.0, 0.1111111111111111
num.value,QUALIFIED_NAME, line no: 68,true,BOOLEAN_LITERAL, line no: 204, 6.257973695026717E-4, insert, 0.9981504315659679, 0.0, 0.2222222222222222
scanner,SIMPLE_NAME, line no: 66,d10.value,QUALIFIED_NAME, line no: 79, 6.199136868064118E-4, insert, 0.4395807644882861, 0.0, 0.2222222222222222
nextDouble,SIMPLE_NAME, line no: 66,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 6.003449282886625E-4, insert, 0.03329223181257707, 0.0, 0.10526315789473684
String,SIMPLE_NAME, line no: 65,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 6.002795343256478E-4, insert, 0.033271719038817, 0.0, 0.10526315789473684
String,SIMPLE_NAME, line no: 203,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 6.002795343256478E-4, insert, 0.033271719038817, 0.0, 0.10526315789473684
nextDouble,SIMPLE_NAME, line no: 66,d9.value,QUALIFIED_NAME, line no: 78, 5.949136868064117E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d10.value,QUALIFIED_NAME, line no: 79, 5.949136868064117E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d8.value,QUALIFIED_NAME, line no: 77, 5.944512946979038E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d7.value,QUALIFIED_NAME, line no: 76, 5.939889025893957E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d6.value,QUALIFIED_NAME, line no: 75, 5.935265104808878E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d5.value,QUALIFIED_NAME, line no: 74, 5.930641183723797E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d4.value,QUALIFIED_NAME, line no: 73, 5.926017262638717E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d3.value,QUALIFIED_NAME, line no: 72, 5.921393341553637E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d2.value,QUALIFIED_NAME, line no: 71, 5.916769420468557E-4, insert, 0.4395807644882861, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,d1.value,QUALIFIED_NAME, line no: 70, 5.912145499383477E-4, insert, 0.4395807644882861, 0.0, 0.2
format,SIMPLE_NAME, line no: 65,true,BOOLEAN_LITERAL, line no: 204, 5.863416512630931E-4, insert, 0.9975354282193469, 0.0, 0.16666666666666666
format,SIMPLE_NAME, line no: 203,true,BOOLEAN_LITERAL, line no: 204, 5.863416512630931E-4, insert, 0.9975354282193469, 0.0, 0.16666666666666666
scanner,SIMPLE_NAME, line no: 66,true,BOOLEAN_LITERAL, line no: 204, 5.698449885502907E-4, insert, 0.9981504315659679, 0.0, 0.14285714285714285
"\nEnter an integer > ",STRING_LITERAL, line no: 65,true,BOOLEAN_LITERAL, line no: 204, 5.607981730022236E-4, insert, 0.9975354282193469, 0.0, 0.13043478260869565
num.value,QUALIFIED_NAME, line no: 68,in,SIMPLE_NAME, line no: 53, 5.583312782572955E-4, insert, 0.011713933415536375, 0.0, 0.1111111111111111
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,mainClass,SIMPLE_NAME, line no: 48, 5.500823128465804E-4, insert, 0.033271719038817, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,length,SIMPLE_NAME, line no: 50, 5.500823128465804E-4, insert, 0.03512014787430684, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,println,SIMPLE_NAME, line no: 56, 5.481537854282193E-4, insert, 0.03450400492914356, 0.0, 0.09375
"\nEnter an integer > ",STRING_LITERAL, line no: 65,args,SIMPLE_NAME, line no: 50, 5.181869324117979E-4, insert, 0.03512014787430684, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,System,SIMPLE_NAME, line no: 53, 5.181869324117979E-4, insert, 0.01170671595810228, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,exec,SIMPLE_NAME, line no: 55, 5.162584049934367E-4, insert, 0.03450400492914356, 0.0, 0.08695652173913043
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,true,BOOLEAN_LITERAL, line no: 204, 5.129041512630931E-4, insert, 0.9975354282193469, 0.0, 0.0625
Math,SIMPLE_NAME, line no: 68,d9.value,QUALIFIED_NAME, line no: 78, 5.105386868064118E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d9.value,QUALIFIED_NAME, line no: 78, 5.105386868064118E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d9.value,QUALIFIED_NAME, line no: 78, 5.103107670979668E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d9.value,QUALIFIED_NAME, line no: 78, 5.103107670979668E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d9.value,QUALIFIED_NAME, line no: 78, 5.103107670979668E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d8.value,QUALIFIED_NAME, line no: 77, 5.100762946979039E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d8.value,QUALIFIED_NAME, line no: 77, 5.100762946979039E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d8.value,QUALIFIED_NAME, line no: 77, 5.098486598890942E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d8.value,QUALIFIED_NAME, line no: 77, 5.098486598890942E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d8.value,QUALIFIED_NAME, line no: 77, 5.098486598890942E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d7.value,QUALIFIED_NAME, line no: 76, 5.096139025893957E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d7.value,QUALIFIED_NAME, line no: 76, 5.096139025893957E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d7.value,QUALIFIED_NAME, line no: 76, 5.093865526802218E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d7.value,QUALIFIED_NAME, line no: 76, 5.093865526802218E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d7.value,QUALIFIED_NAME, line no: 76, 5.093865526802218E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d6.value,QUALIFIED_NAME, line no: 75, 5.091515104808878E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d6.value,QUALIFIED_NAME, line no: 75, 5.091515104808878E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d6.value,QUALIFIED_NAME, line no: 75, 5.089244454713494E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d6.value,QUALIFIED_NAME, line no: 75, 5.089244454713494E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d6.value,QUALIFIED_NAME, line no: 75, 5.089244454713494E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d5.value,QUALIFIED_NAME, line no: 74, 5.086891183723798E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d5.value,QUALIFIED_NAME, line no: 74, 5.086891183723798E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d5.value,QUALIFIED_NAME, line no: 74, 5.084623382624768E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d5.value,QUALIFIED_NAME, line no: 74, 5.084623382624768E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d5.value,QUALIFIED_NAME, line no: 74, 5.084623382624768E-4, insert, 0.43930991990141716, 0.0, 0.125
String,SIMPLE_NAME, line no: 65,System.in,QUALIFIED_NAME, line no: 53, 5.083179297597042E-4, insert, 0.011090573012939002, 0.0, 0.4444444444444444
String,SIMPLE_NAME, line no: 203,System.in,QUALIFIED_NAME, line no: 53, 5.083179297597042E-4, insert, 0.011090573012939002, 0.0, 0.4444444444444444
Math,SIMPLE_NAME, line no: 68,d4.value,QUALIFIED_NAME, line no: 73, 5.082267262638718E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d4.value,QUALIFIED_NAME, line no: 73, 5.082267262638718E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d4.value,QUALIFIED_NAME, line no: 73, 5.080002310536044E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d4.value,QUALIFIED_NAME, line no: 73, 5.080002310536044E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d4.value,QUALIFIED_NAME, line no: 73, 5.080002310536044E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d3.value,QUALIFIED_NAME, line no: 72, 5.077643341553638E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d3.value,QUALIFIED_NAME, line no: 72, 5.077643341553638E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d3.value,QUALIFIED_NAME, line no: 72, 5.07538123844732E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d3.value,QUALIFIED_NAME, line no: 72, 5.07538123844732E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d3.value,QUALIFIED_NAME, line no: 72, 5.07538123844732E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d2.value,QUALIFIED_NAME, line no: 71, 5.073019420468557E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d2.value,QUALIFIED_NAME, line no: 71, 5.073019420468557E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d2.value,QUALIFIED_NAME, line no: 71, 5.070760166358595E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d2.value,QUALIFIED_NAME, line no: 71, 5.070760166358595E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d2.value,QUALIFIED_NAME, line no: 71, 5.070760166358595E-4, insert, 0.43930991990141716, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,d1.value,QUALIFIED_NAME, line no: 70, 5.068395499383477E-4, insert, 0.4395807644882861, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,d1.value,QUALIFIED_NAME, line no: 70, 5.068395499383477E-4, insert, 0.4395807644882861, 0.0, 0.125
format,SIMPLE_NAME, line no: 65,d1.value,QUALIFIED_NAME, line no: 70, 5.066139094269871E-4, insert, 0.43930991990141716, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,d1.value,QUALIFIED_NAME, line no: 70, 5.066139094269871E-4, insert, 0.43930991990141716, 0.0, 0.125
format,SIMPLE_NAME, line no: 203,d1.value,QUALIFIED_NAME, line no: 70, 5.066139094269871E-4, insert, 0.43930991990141716, 0.0, 0.125
nextDouble,SIMPLE_NAME, line no: 66,in,SIMPLE_NAME, line no: 53, 5.061646115906289E-4, insert, 0.011713933415536375, 0.0, 0.1
Math,SIMPLE_NAME, line no: 68,d10.value,QUALIFIED_NAME, line no: 79, 4.949136868064118E-4, insert, 0.4395807644882861, 0.0, 0.1111111111111111
abs,SIMPLE_NAME, line no: 68,d10.value,QUALIFIED_NAME, line no: 79, 4.949136868064118E-4, insert, 0.4395807644882861, 0.0, 0.1111111111111111
format,SIMPLE_NAME, line no: 65,d10.value,QUALIFIED_NAME, line no: 79, 4.946857670979667E-4, insert, 0.43930991990141716, 0.0, 0.1111111111111111
num,SIMPLE_NAME, line no: 68,d10.value,QUALIFIED_NAME, line no: 79, 4.946857670979667E-4, insert, 0.43930991990141716, 0.0, 0.1111111111111111
format,SIMPLE_NAME, line no: 203,d10.value,QUALIFIED_NAME, line no: 79, 4.946857670979667E-4, insert, 0.43930991990141716, 0.0, 0.1111111111111111
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,java,SIMPLE_NAME, line no: 44, 4.7872679836722114E-4, insert, 0.0012322858903265558, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,Scanner,SIMPLE_NAME, line no: 44, 4.767982709488601E-4, insert, 6.161429451632779E-4, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d9.value,QUALIFIED_NAME, line no: 78, 4.751545170979668E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d10.value,QUALIFIED_NAME, line no: 79, 4.751545170979668E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d8.value,QUALIFIED_NAME, line no: 77, 4.746924098890942E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d7.value,QUALIFIED_NAME, line no: 76, 4.7423030268022183E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d6.value,QUALIFIED_NAME, line no: 75, 4.7376819547134935E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d5.value,QUALIFIED_NAME, line no: 74, 4.733060882624769E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d4.value,QUALIFIED_NAME, line no: 73, 4.7284398105360443E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d3.value,QUALIFIED_NAME, line no: 72, 4.7238187384473194E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d2.value,QUALIFIED_NAME, line no: 71, 4.7191976663585956E-4, insert, 0.43930991990141716, 0.0, 0.09375
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,d1.value,QUALIFIED_NAME, line no: 70, 4.71457659426987E-4, insert, 0.43930991990141716, 0.0, 0.09375
scanner,SIMPLE_NAME, line no: 66,mainClass.scanner,QUALIFIED_NAME, line no: 51, 4.710959599622832E-4, insert, 0.009864364981504316, 1.0, 0.4117647058823529
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d9.value,QUALIFIED_NAME, line no: 78, 4.6751185405448847E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d10.value,QUALIFIED_NAME, line no: 79, 4.6751185405448847E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d8.value,QUALIFIED_NAME, line no: 77, 4.6704974684561604E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d7.value,QUALIFIED_NAME, line no: 76, 4.6658763963674355E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d6.value,QUALIFIED_NAME, line no: 75, 4.661255324278711E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d5.value,QUALIFIED_NAME, line no: 74, 4.6566342521899863E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d4.value,QUALIFIED_NAME, line no: 73, 4.652013180101262E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d3.value,QUALIFIED_NAME, line no: 72, 4.647392108012537E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d2.value,QUALIFIED_NAME, line no: 71, 4.642771035923813E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,d1.value,QUALIFIED_NAME, line no: 70, 4.638149963835088E-4, insert, 0.43930991990141716, 0.0, 0.08695652173913043
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 193, 4.4899468459925704E-4, insert, 0.4873378628783199, 1.0, 0.15023474178403756
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 193, 4.4899468459925704E-4, insert, 0.4873378628783199, 1.0, 0.15023474178403756
"\nEnter an integer > ",STRING_LITERAL, line no: 65,util,SIMPLE_NAME, line no: 44, 4.4683141793243857E-4, insert, 0.0012322858903265558, 0.0, 0.08695652173913043
"\nEnter an integer > ",STRING_LITERAL, line no: 65,in,SIMPLE_NAME, line no: 53, 4.449028905140775E-4, insert, 0.01170671595810228, 0.0, 0.08695652173913043
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 125, 4.190025671710933E-4, insert, 0.44410129709697344, 1.0, 0.14732142857142858
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 125, 4.190025671710933E-4, insert, 0.44410129709697344, 1.0, 0.14732142857142858
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 188, 4.0925815891044976E-4, insert, 0.48672019765287217, 1.0, 0.1085972850678733
scanner,SIMPLE_NAME, line no: 66,java.util.Scanner,QUALIFIED_NAME, line no: 51, 4.05381881482556E-4, insert, 0.010480887792848335, 0.0, 0.35294117647058826
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 193, 4.046284874161584E-4, insert, 0.4873378628783199, 0.0, 0.10328638497652583
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 193, 4.046284874161584E-4, insert, 0.4873378628783199, 0.8571428571428571, 0.10328638497652583
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,args,SIMPLE_NAME, line no: 50, 4.0336356284658044E-4, insert, 0.03512014787430684, 0.0, 0.0625
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,System,SIMPLE_NAME, line no: 53, 4.0336356284658044E-4, insert, 0.01170671595810228, 0.0, 0.0625
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,exec,SIMPLE_NAME, line no: 55, 4.0143503542821934E-4, insert, 0.03450400492914356, 0.0, 0.0625
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 188, 3.9215408651225973E-4, insert, 0.48672019765287217, 1.0, 0.09049773755656108
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 1.5, 0.3181818181818182
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3181818181818182
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3181818181818182
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3181818181818182
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3181818181818182
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3181818181818182
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.915414632284747E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3181818181818182
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 193, 3.913186282612289E-4, insert, 0.4873378628783199, 0.8, 0.0892018779342723
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 79, 3.872983346207416E-4, insert, 0.9115384615384615, 12.0, 1.0
num.value,QUALIFIED_NAME, line no: 68,java.util,QUALIFIED_NAME, line no: 44, 3.8378545006165227E-4, insert, 6.165228113440197E-4, 0.0, 0.3333333333333333
value,SIMPLE_NAME, line no: 68,java.util,QUALIFIED_NAME, line no: 44, 3.8378003696857665E-4, insert, 6.161429451632779E-4, 0.0, 0.3333333333333333
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.833260440092469E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.3111111111111111
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 1.5, 0.3111111111111111
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.823329713563732E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.3111111111111111
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 121, 3.8229468807906116E-4, insert, 0.4434836318715256, 1.0, 0.10888888888888888
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 125, 3.810338171710933E-4, insert, 0.44410129709697344, 0.8, 0.10714285714285714
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 125, 3.810338171710933E-4, insert, 0.44410129709697344, 0.8571428571428571, 0.10714285714285714
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 184, 3.7708417563917245E-4, insert, 0.48610253242742435, 1.0, 0.07496251874062969
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 125, 3.725963171710933E-4, insert, 0.44410129709697344, 0.0, 0.09821428571428571
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.703638325401585E-4, insert, 0.03076923076923077, 1.6, 0.2982456140350877
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 3.679439824923947E-4, insert, 0.028205128205128206, 0.6000000000000001, 0.2978723404255319
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 184, 3.671666344097871E-4, insert, 0.48610253242742435, 1.0, 0.06446776611694154
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 3.66950909839521E-4, insert, 0.026923076923076925, 0.6000000000000001, 0.2978723404255319
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.633961031826092E-4, insert, 0.029487179487179487, 1.6, 0.29310344827586204
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 121, 3.633946880790612E-4, insert, 0.4434836318715256, 1.0, 0.08888888888888889
nextDouble,SIMPLE_NAME, line no: 66,System.out,QUALIFIED_NAME, line no: 56, 3.633939580764488E-4, insert, 0.0345252774352651, 0.0, 0.3
num.value,QUALIFIED_NAME, line no: 68,System.out,QUALIFIED_NAME, line no: 56, 3.633939580764488E-4, insert, 0.0345252774352651, 0.0, 0.3
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 3.615952777228342E-4, insert, 0.02564102564102564, 0.0, 0.29411764705882354
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 3.615952777228342E-4, insert, 0.02564102564102564, 0.0, 0.29411764705882354
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 179, 3.601291149858939E-4, insert, 0.48548486720197653, 1.0, 0.057432432432432436
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 188, 3.6008395076565336E-4, insert, 0.48672019765287217, 0.0, 0.05656108597285068
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 188, 3.6008395076565336E-4, insert, 0.48672019765287217, 0.8, 0.05656108597285068
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 188, 3.6008395076565336E-4, insert, 0.48672019765287217, 0.8571428571428571, 0.05656108597285068
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.5442240311244925E-4, insert, 0.06282051282051282, 0.0, 0.2631578947368421
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.5442240311244925E-4, insert, 0.06282051282051282, 0.0, 0.2631578947368421
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.5442240311244925E-4, insert, 0.06282051282051282, 0.0, 0.2631578947368421
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.5442240311244925E-4, insert, 0.06282051282051282, 0.0, 0.2631578947368421
Math,SIMPLE_NAME, line no: 68,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 3.532396651307677E-4, insert, 0.03329223181257707, 0.0, 0.05263157894736842
abs,SIMPLE_NAME, line no: 68,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 3.532396651307677E-4, insert, 0.03329223181257707, 0.0, 0.05263157894736842
num.value,QUALIFIED_NAME, line no: 68,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 3.532396651307677E-4, insert, 0.03329223181257707, 0.0, 0.05263157894736842
format,SIMPLE_NAME, line no: 65,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 3.53174271167753E-4, insert, 0.033271719038817, 0.0, 0.05263157894736842
value,SIMPLE_NAME, line no: 68,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 3.53174271167753E-4, insert, 0.033271719038817, 0.0, 0.05263157894736842
format,SIMPLE_NAME, line no: 203,digits_65e02c1a_015,SIMPLE_NAME, line no: 48, 3.53174271167753E-4, insert, 0.033271719038817, 0.0, 0.05263157894736842
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 179, 3.5267979066156953E-4, insert, 0.48548486720197653, 1.0, 0.04954954954954955
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 3.518314541609667E-4, insert, 0.02564102564102564, 0.0, 0.2857142857142857
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 116, 3.5072430898702906E-4, insert, 0.4428659666460778, 1.0, 0.07589285714285714
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 1.6, 0.2807017543859649
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.499797096653827E-4, insert, 0.03076923076923077, 0.6666666666666666, 0.2807017543859649
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 173, 3.4993692548050724E-4, insert, 0.4848672019765287, 1.0, 0.047058823529411764
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 3.498925980291657E-4, insert, 0.06282051282051282, 0.0, 0.25925925925925924
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,value=i; ,EXPRESSION_STATEMENT, line no: 7, 3.4823747694104286E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.2962962962962963
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.4658235585292006E-4, insert, 0.06282051282051282, 0.0, 0.2564102564102564
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 184, 3.4591476034681856E-4, insert, 0.48610253242742435, 0.8, 0.041979010494752625
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 184, 3.4449796874262066E-4, insert, 0.48610253242742435, 0.0, 0.04047976011994003
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 173, 3.439505001411407E-4, insert, 0.4848672019765287, 1.0, 0.04072398190045249
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 1.6, 0.27586206896551724
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.43363430702226E-4, insert, 0.029487179487179487, 0.6666666666666666, 0.27586206896551724
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 184, 3.4308117713842276E-4, insert, 0.48610253242742435, 0.8571428571428571, 0.038980509745127435
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 167, 3.4307796687852246E-4, insert, 0.4842495367510809, 1.0, 0.04021244309559939
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 116, 3.3947430898702903E-4, insert, 0.4428659666460778, 1.0, 0.06398809523809523
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 167, 3.380589987449868E-4, insert, 0.4842495367510809, 1.0, 0.03490136570561457
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 162, 3.374876861338404E-4, insert, 0.4836318715256331, 1.0, 0.03470857891290111
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 179, 3.367169528237317E-4, insert, 0.48548486720197653, 0.0, 0.03265765765765766
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 179, 3.367169528237317E-4, insert, 0.48548486720197653, 0.8, 0.03265765765765766
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 121, 3.360946880790612E-4, insert, 0.4434836318715256, 0.8, 0.06
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 179, 3.3458857444535335E-4, insert, 0.48548486720197653, 0.8571428571428571, 0.030405405405405407
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 121, 3.339946880790611E-4, insert, 0.4434836318715256, 0.8571428571428571, 0.057777777777777775
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 3.3388712977699416E-4, insert, 0.02564102564102564, 0.0, 0.2702702702702703
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 110, 3.3382991304106436E-4, insert, 0.44224830142063004, 1.0, 0.058426966292134834
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 162, 3.337745230690074E-4, insert, 0.4836318715256331, 1.0, 0.03077930582842174
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 156, 3.3321638645872413E-4, insert, 0.4830142063001853, 1.0, 0.030600461893764433
Math,SIMPLE_NAME, line no: 68,args.length,QUALIFIED_NAME, line no: 50, 3.327121398946306E-4, insert, 0.0345252774352651, 0.0, 0.2727272727272727
num.value,QUALIFIED_NAME, line no: 68,args.length,QUALIFIED_NAME, line no: 50, 3.327121398946306E-4, insert, 0.0345252774352651, 0.0, 0.2727272727272727
String,SIMPLE_NAME, line no: 65,args.length,QUALIFIED_NAME, line no: 50, 3.326961855150394E-4, insert, 0.03450400492914356, 0.0, 0.2727272727272727
value,SIMPLE_NAME, line no: 68,args.length,QUALIFIED_NAME, line no: 50, 3.326961855150394E-4, insert, 0.03450400492914356, 0.0, 0.2727272727272727
String,SIMPLE_NAME, line no: 203,args.length,QUALIFIED_NAME, line no: 50, 3.326961855150394E-4, insert, 0.03450400492914356, 0.0, 0.2727272727272727
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.320495853230611E-4, insert, 0.06282051282051282, 0.0, 0.24390243902439024
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,util,SIMPLE_NAME, line no: 44, 3.3200804836722115E-4, insert, 0.0012322858903265558, 0.0, 0.0625
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 173, 3.319776494624077E-4, insert, 0.4848672019765287, 0.0, 0.028054298642533938
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 121, 3.318946880790612E-4, insert, 0.4434836318715256, 0.0, 0.05555555555555555
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 173, 3.3112244584249817E-4, insert, 0.4848672019765287, 0.8, 0.027149321266968326
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 156, 3.304883264125348E-4, insert, 0.4830142063001853, 1.0, 0.02771362586605081
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,in,SIMPLE_NAME, line no: 53, 3.300795209488601E-4, insert, 0.01170671595810228, 0.0, 0.0625
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 151, 3.298203226877417E-4, insert, 0.4823965410747375, 1.0, 0.027418520434557683
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 173, 3.2941203860267917E-4, insert, 0.4848672019765287, 0.8571428571428571, 0.025339366515837104
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 167, 3.2802106247791543E-4, insert, 0.4842495367510809, 0.0, 0.024279210925644917
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 151, 3.273759357244721E-4, insert, 0.4823965410747375, 1.0, 0.024831867563372995
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 167, 3.273040670302675E-4, insert, 0.4842495367510809, 0.8, 0.023520485584218515
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 146, 3.2703477629209476E-4, insert, 0.4817788758492897, 1.0, 0.02488262910798122
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 167, 3.258700761349716E-4, insert, 0.4842495367510809, 0.8571428571428571, 0.022003034901365705
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 110, 3.2533553101859243E-4, insert, 0.44224830142063004, 1.0, 0.04943820224719101
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 162, 3.251104759177304E-4, insert, 0.4836318715256331, 0.0, 0.021611001964636542
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 146, 3.248164664329398E-4, insert, 0.4817788758492897, 1.0, 0.022535211267605635
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.245928899678597E-4, insert, 0.03333333333333333, 1.6666666666666665, 0.2571428571428571
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 162, 3.238727548961194E-4, insert, 0.4836318715256331, 0.8, 0.020301244269810084
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 105, 3.235941486290518E-4, insert, 0.4416306361951822, 1.0, 0.04800724637681159
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 162, 3.232538943853139E-4, insert, 0.4836318715256331, 0.8571428571428571, 0.019646365422396856
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 156, 3.2230414627396666E-4, insert, 0.4830142063001853, 0.0, 0.01905311778290993
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 156, 3.2121292225549086E-4, insert, 0.4830142063001853, 0.8, 0.01789838337182448
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 156, 3.20667310246253E-4, insert, 0.4830142063001853, 0.8571428571428571, 0.017321016166281754
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 151, 3.2004277483466354E-4, insert, 0.4823965410747375, 0.0, 0.017071908949818936
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 116, 3.19786808987029E-4, insert, 0.4428659666460778, 0.8, 0.043154761904761904
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.193917468784628E-4, insert, 0.03205128205128205, 1.6666666666666665, 0.2535211267605634
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 151, 3.190650200493557E-4, insert, 0.4823965410747375, 0.8, 0.01603724780134506
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.188687004238867E-4, insert, 0.06282051282051282, 0.0, 0.23255813953488372
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 151, 3.185761426567018E-4, insert, 0.4823965410747375, 0.8571428571428571, 0.015519917227108122
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 146, 3.181615368554751E-4, insert, 0.4817788758492897, 0.0, 0.015492957746478873
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 3.1778324891958284E-4, insert, 0.02564102564102564, 0.0, 0.2564102564102564
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 146, 3.1727421291181306E-4, insert, 0.4817788758492897, 0.8, 0.01455399061032864
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 116, 3.1697430898702903E-4, insert, 0.4428659666460778, 0.0, 0.04017857142857143
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 116, 3.1697430898702903E-4, insert, 0.4428659666460778, 0.8571428571428571, 0.04017857142857143
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n%d\n" d1.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value == 0) {   output+=(String.format("\n0\n")); } ,IF_STATEMENT, line no: 146, 3.1683055093998205E-4, insert, 0.4817788758492897, 0.8571428571428571, 0.014084507042253521
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 105, 3.1674632254209527E-4, insert, 0.4416306361951822, 1.0, 0.04076086956521739
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 100, 3.1595461006709706E-4, insert, 0.4410129709697344, 1.0, 0.04033485540334855
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 3.150026454915365E-4, insert, 0.016666666666666666, 0.0, 0.26
"\nEnter an integer > ",STRING_LITERAL, line no: 65,out,SIMPLE_NAME, line no: 56, 3.1405649762918916E-4, insert, 0.03512014787430684, 0.0, 0.043478260869565216
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 100, 3.1092036349175456E-4, insert, 0.4410129709697344, 1.0, 0.0350076103500761
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 110, 3.104703624792666E-4, insert, 0.44224830142063004, 0.8, 0.033707865168539325
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 94, 3.1039970051363743E-4, insert, 0.4403953057442866, 1.0, 0.034868421052631576
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 110, 3.094085647264576E-4, insert, 0.44224830142063004, 0.0, 0.03258426966292135
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 110, 3.0834676697364863E-4, insert, 0.44224830142063004, 0.8571428571428571, 0.03146067415730337
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 1.6666666666666665, 0.24285714285714285
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 1.6666666666666665, 0.24285714285714285
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 0.7142857142857142, 0.24285714285714285
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 0.7142857142857142, 0.24285714285714285
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 0.7142857142857142, 0.24285714285714285
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 0.7142857142857142, 0.24285714285714285
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 0.7142857142857142, 0.24285714285714285
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 3.07994389912685E-4, insert, 0.03333333333333333, 0.7142857142857142, 0.24285714285714285
num.value,QUALIFIED_NAME, line no: 68,mainClass.output,QUALIFIED_NAME, line no: 56, 3.071439580764488E-4, insert, 0.0345252774352651, 0.0, 0.25
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 3.068594497379722E-4, insert, 0.06282051282051282, 0.0, 0.2222222222222222
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 94, 3.066694373557427E-4, insert, 0.4403953057442866, 1.0, 0.030921052631578946
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 89, 3.06145279380527E-4, insert, 0.4397776405188388, 1.0, 0.03077816492450639
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 105, 3.0476262688992136E-4, insert, 0.4416306361951822, 0.0, 0.028079710144927536
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 105, 3.0476262688992136E-4, insert, 0.4416306361951822, 0.8, 0.028079710144927536
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 89, 3.034013769415026E-4, insert, 0.4397776405188388, 1.0, 0.027874564459930314
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 3.0325047838972386E-4, insert, 0.02564102564102564, 0.0, 0.24390243902439024
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 105, 3.030506703681822E-4, insert, 0.4416306361951822, 0.8571428571428571, 0.026268115942028984
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 1.6666666666666665, 0.23943661971830985
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 1.6666666666666665, 0.23943661971830985
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 0.7142857142857142, 0.23943661971830985
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 0.7142857142857142, 0.23943661971830985
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 0.7142857142857142, 0.23943661971830985
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 0.7142857142857142, 0.23943661971830985
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 0.7142857142857142, 0.23943661971830985
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 3.030270285142061E-4, insert, 0.03205128205128205, 0.7142857142857142, 0.23943661971830985
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 84, 3.0275672193483635E-4, insert, 0.43915997529339096, 1.0, 0.027604166666666666
"\nEnter an integer > ",STRING_LITERAL, line no: 65,java.util.Scanner,QUALIFIED_NAME, line no: 51, 3.0179619062926943E-4, insert, 0.010474430067775724, 0.0, 0.2608695652173913
"\nEnter an integer > ",STRING_LITERAL, line no: 65,mainClass.scanner,QUALIFIED_NAME, line no: 51, 3.01334083420397E-4, insert, 0.009858287122612447, 0.0, 0.2608695652173913
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 100, 3.0085187034106965E-4, insert, 0.4410129709697344, 0.0, 0.0243531202435312
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 84, 3.002957844348363E-4, insert, 0.43915997529339096, 1.0, 0.025
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 100, 3.0013269225887787E-4, insert, 0.4410129709697344, 0.8, 0.02359208523592085
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 100, 2.994135141766861E-4, insert, 0.4410129709697344, 0.8571428571428571, 0.0228310502283105
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 94, 2.9796548998732163E-4, insert, 0.4403953057442866, 0.0, 0.021710526315789475
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 94, 2.9672206893469006E-4, insert, 0.4403953057442866, 0.8, 0.020394736842105264
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 94, 2.961003584083743E-4, insert, 0.4403953057442866, 0.8571428571428571, 0.019736842105263157
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 2.958722629402207E-4, insert, 0.06282051282051282, 0.0, 0.2127659574468085
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 89, 2.9516966962442944E-4, insert, 0.4397776405188388, 0.0, 0.01916376306620209
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.951231365676467E-4, insert, 0.06282051282051282, 0.0, 0.21212121212121213
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 89, 2.940721086488197E-4, insert, 0.4397776405188388, 0.8, 0.018002322880371662
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 89, 2.935233281610148E-4, insert, 0.4397776405188388, 0.8571428571428571, 0.017421602787456445
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 84, 2.929129719348363E-4, insert, 0.43915997529339096, 0.0, 0.0171875
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 84, 2.919285969348363E-4, insert, 0.43915997529339096, 0.8, 0.016145833333333335
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (d10.value == 0 && d9.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value != 0) {   output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value != 0) {   output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value != 0) {   output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); }  else if (d10.value == 0 && d9.value == 0 && d8.value == 0 && d7.value == 0 && d6.value == 0 && d5.value == 0 && d4.value == 0 && d3.value == 0 && d2.value == 0 && d1.value != 0) {   output+=(String.format("\n-%d\n" d1.value)); } ,IF_STATEMENT, line no: 84, 2.914364094348363E-4, insert, 0.43915997529339096, 0.8571428571428571, 0.015625
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 2.9006959349054946E-4, insert, 0.02564102564102564, 0.0, 0.23255813953488372
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.856438066993069E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.24242424242424243
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.8203263341612986E-4, insert, 0.017948717948717947, 0.0, 0.23076923076923078
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.810395607632561E-4, insert, 0.06282051282051282, 0.0, 0.2
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.7978326403371706E-4, insert, 0.035897435897435895, 1.7142857142857142, 0.21686746987951808
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.7978326403371706E-4, insert, 0.035897435897435895, 1.7142857142857142, 0.21686746987951808
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 2.78060342804635E-4, insert, 0.02564102564102564, 0.0, 0.2222222222222222
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.757904624552094E-4, insert, 0.03461538461538462, 1.7142857142857142, 0.21428571428571427
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.757904624552094E-4, insert, 0.03461538461538462, 1.7142857142857142, 0.21428571428571427
num.value,QUALIFIED_NAME, line no: 68,java.util.Scanner,QUALIFIED_NAME, line no: 51, 2.730289403060854E-4, insert, 0.010480887792848335, 0.0, 0.23529411764705882
value,SIMPLE_NAME, line no: 68,java.util.Scanner,QUALIFIED_NAME, line no: 51, 2.730238121126454E-4, insert, 0.010474430067775724, 0.0, 0.23529411764705882
num.value,QUALIFIED_NAME, line no: 68,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.725665481975774E-4, insert, 0.009864364981504316, 0.0, 0.23529411764705882
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.6954829149428904E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.22857142857142856
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.6847853369447533E-4, insert, 0.06282051282051282, 0.0, 0.1891891891891892
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 2.6707315600688346E-4, insert, 0.02564102564102564, 0.0, 0.2127659574468085
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 1.7142857142857142, 0.20481927710843373
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 1.7142857142857142, 0.20481927710843373
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 0.75, 0.20481927710843373
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 0.75, 0.20481927710843373
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 0.75, 0.20481927710843373
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 0.75, 0.20481927710843373
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 2.657845290474252E-4, insert, 0.035897435897435895, 0.75, 0.20481927710843373
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 1.7142857142857142, 0.20238095238095238
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 1.7142857142857142, 0.20238095238095238
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 0.75, 0.20238095238095238
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 0.75, 0.20238095238095238
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 0.75, 0.20238095238095238
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 0.75, 0.20238095238095238
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 2.6195837907589726E-4, insert, 0.03461538461538462, 0.75, 0.20238095238095238
Math,SIMPLE_NAME, line no: 68,java.util,QUALIFIED_NAME, line no: 44, 2.5878545006165226E-4, insert, 6.165228113440197E-4, 0.0, 0.2222222222222222
String,SIMPLE_NAME, line no: 65,java.util,QUALIFIED_NAME, line no: 44, 2.587800369685767E-4, insert, 6.161429451632779E-4, 0.0, 0.2222222222222222
format,SIMPLE_NAME, line no: 65,java.util,QUALIFIED_NAME, line no: 44, 2.587800369685767E-4, insert, 6.161429451632779E-4, 0.0, 0.2222222222222222
String,SIMPLE_NAME, line no: 203,java.util,QUALIFIED_NAME, line no: 44, 2.587800369685767E-4, insert, 6.161429451632779E-4, 0.0, 0.2222222222222222
format,SIMPLE_NAME, line no: 203,java.util,QUALIFIED_NAME, line no: 44, 2.587800369685767E-4, insert, 6.161429451632779E-4, 0.0, 0.2222222222222222
scanner,SIMPLE_NAME, line no: 66,System.in,QUALIFIED_NAME, line no: 53, 2.5832305795314426E-4, insert, 0.011097410604192354, 0.0, 0.2222222222222222
num.value,QUALIFIED_NAME, line no: 68,System.in,QUALIFIED_NAME, line no: 53, 2.5832305795314426E-4, insert, 0.011097410604192354, 0.0, 0.2222222222222222
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.572058170942874E-4, insert, 0.06282051282051282, 0.0, 0.1794871794871795
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,out,SIMPLE_NAME, line no: 56, 2.5664481284658045E-4, insert, 0.03512014787430684, 0.0, 0.03125
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.55192831987111E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.21621621621621623
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,java.util.Scanner,QUALIFIED_NAME, line no: 51, 2.5441167975970427E-4, insert, 0.010474430067775724, 0.0, 0.21875
scanner,SIMPLE_NAME, line no: 66,System.out,QUALIFIED_NAME, line no: 56, 2.5089395807644877E-4, insert, 0.0345252774352651, 0.0, 0.2
String,SIMPLE_NAME, line no: 65,System.out,QUALIFIED_NAME, line no: 56, 2.5087800369685766E-4, insert, 0.03450400492914356, 0.0, 0.2
format,SIMPLE_NAME, line no: 65,System.out,QUALIFIED_NAME, line no: 56, 2.5087800369685766E-4, insert, 0.03450400492914356, 0.0, 0.2
String,SIMPLE_NAME, line no: 203,System.out,QUALIFIED_NAME, line no: 56, 2.5087800369685766E-4, insert, 0.03450400492914356, 0.0, 0.2
format,SIMPLE_NAME, line no: 203,System.out,QUALIFIED_NAME, line no: 56, 2.5087800369685766E-4, insert, 0.03450400492914356, 0.0, 0.2
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.4764749281037805E-4, insert, 0.038461538461538464, 1.75, 0.1875
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.4764749281037805E-4, insert, 0.038461538461538464, 1.75, 0.1875
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.4764749281037805E-4, insert, 0.038461538461538464, 1.75, 0.1875
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.470328777233861E-4, insert, 0.06282051282051282, 0.0, 0.17073170731707318
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.444084890933377E-4, insert, 0.03717948717948718, 1.75, 0.18556701030927836
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.444084890933377E-4, insert, 0.03717948717948718, 1.75, 0.18556701030927836
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.444084890933377E-4, insert, 0.03717948717948718, 1.75, 0.18556701030927836
"\nEnter an integer > ",STRING_LITERAL, line no: 65,java,SIMPLE_NAME, line no: 44, 2.427009831498299E-4, insert, 0.0012322858903265558, 0.0, 0.043478260869565216
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.4230972730118197E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.20512820512820512
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.37806258293964E-4, insert, 0.06282051282051282, 0.0, 0.16279069767441862
nextDouble,SIMPLE_NAME, line no: 66,mainClass.output,QUALIFIED_NAME, line no: 56, 2.3683145807644877E-4, insert, 0.0345252774352651, 0.0, 0.1875
format,SIMPLE_NAME, line no: 65,mainClass.output,QUALIFIED_NAME, line no: 56, 2.3681550369685764E-4, insert, 0.03450400492914356, 0.0, 0.1875
value,SIMPLE_NAME, line no: 68,mainClass.output,QUALIFIED_NAME, line no: 56, 2.3681550369685764E-4, insert, 0.03450400492914356, 0.0, 0.1875
format,SIMPLE_NAME, line no: 203,mainClass.output,QUALIFIED_NAME, line no: 56, 2.3681550369685764E-4, insert, 0.03450400492914356, 0.0, 0.1875
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.3554441985347988E-4, insert, 0.038461538461538464, 1.75, 0.17708333333333334
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.3554441985347988E-4, insert, 0.038461538461538464, 1.75, 0.17708333333333334
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.3554441985347988E-4, insert, 0.038461538461538464, 0.7777777777777777, 0.17708333333333334
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.3554441985347988E-4, insert, 0.038461538461538464, 0.7777777777777777, 0.17708333333333334
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.3554441985347988E-4, insert, 0.038461538461538464, 0.7777777777777777, 0.17708333333333334
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 2.3554441985347988E-4, insert, 0.038461538461538464, 0.7777777777777777, 0.17708333333333334
nextDouble,SIMPLE_NAME, line no: 66,java.util,QUALIFIED_NAME, line no: 44, 2.3378545006165228E-4, insert, 6.165228113440197E-4, 0.0, 0.2
nextDouble,SIMPLE_NAME, line no: 66,System.in,QUALIFIED_NAME, line no: 53, 2.3332305795314425E-4, insert, 0.011097410604192354, 0.0, 0.2
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.3243019008444877E-4, insert, 0.03717948717948718, 1.75, 0.17525773195876287
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.3243019008444877E-4, insert, 0.03717948717948718, 1.75, 0.17525773195876287
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.3243019008444877E-4, insert, 0.03717948717948718, 0.7777777777777777, 0.17525773195876287
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.3243019008444877E-4, insert, 0.03717948717948718, 0.7777777777777777, 0.17525773195876287
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.3243019008444877E-4, insert, 0.03717948717948718, 0.7777777777777777, 0.17525773195876287
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 2.3243019008444877E-4, insert, 0.03717948717948718, 0.7777777777777777, 0.17525773195876287
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.3068351087729476E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.1951219512195122
scanner,SIMPLE_NAME, line no: 66,args.length,QUALIFIED_NAME, line no: 50, 2.3043941262190337E-4, insert, 0.0345252774352651, 0.0, 0.18181818181818182
nextDouble,SIMPLE_NAME, line no: 66,args.length,QUALIFIED_NAME, line no: 50, 2.3043941262190337E-4, insert, 0.0345252774352651, 0.0, 0.18181818181818182
abs,SIMPLE_NAME, line no: 68,args.length,QUALIFIED_NAME, line no: 50, 2.3043941262190337E-4, insert, 0.0345252774352651, 0.0, 0.18181818181818182
format,SIMPLE_NAME, line no: 65,args.length,QUALIFIED_NAME, line no: 50, 2.304234582423122E-4, insert, 0.03450400492914356, 0.0, 0.18181818181818182
format,SIMPLE_NAME, line no: 203,args.length,QUALIFIED_NAME, line no: 50, 2.304234582423122E-4, insert, 0.03450400492914356, 0.0, 0.18181818181818182
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.293997828138239E-4, insert, 0.06282051282051282, 0.0, 0.15555555555555556
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.2365089433709637E-4, insert, 0.041025641025641026, 1.7777777777777777, 0.1651376146788991
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.2365089433709637E-4, insert, 0.041025641025641026, 1.7777777777777777, 0.1651376146788991
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.2365089433709637E-4, insert, 0.041025641025641026, 1.7777777777777777, 0.1651376146788991
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.2365089433709637E-4, insert, 0.041025641025641026, 1.7777777777777777, 0.1651376146788991
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.2170875205539781E-4, insert, 0.06282051282051282, 0.0, 0.14893617021276595
"\nEnter an integer > ",STRING_LITERAL, line no: 65,mainClass.output,QUALIFIED_NAME, line no: 56, 2.2153017760990115E-4, insert, 0.03450400492914356, 0.0, 0.17391304347826086
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.2091352559835774E-4, insert, 0.03974358974358974, 1.7777777777777777, 0.16363636363636364
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.2091352559835774E-4, insert, 0.03974358974358974, 1.7777777777777777, 0.16363636363636364
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.2091352559835774E-4, insert, 0.03974358974358974, 1.7777777777777777, 0.16363636363636364
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.2091352559835774E-4, insert, 0.03974358974358974, 1.7777777777777777, 0.16363636363636364
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.2013880295795524E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.18604651162790697
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.1879332255083178E-4, insert, 0.009858287122612447, 0.0, 0.1875
"\nEnter an integer > ",STRING_LITERAL, line no: 65,i,SIMPLE_NAME, line no: 7, 2.1570159929277505E-4, insert, 0.0036968576709796672, 0.0, 0.043478260869565216
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.129913071456998E-4, insert, 0.041025641025641026, 1.7777777777777777, 0.1559633027522936
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.129913071456998E-4, insert, 0.041025641025641026, 1.7777777777777777, 0.1559633027522936
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.129913071456998E-4, insert, 0.041025641025641026, 0.8, 0.1559633027522936
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.129913071456998E-4, insert, 0.041025641025641026, 0.8, 0.1559633027522936
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 2.129913071456998E-4, insert, 0.041025641025641026, 0.8, 0.1559633027522936
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.1053140240922367E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.17777777777777778
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.1035084374506483E-4, insert, 0.03974358974358974, 1.7777777777777777, 0.15454545454545454
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.1035084374506483E-4, insert, 0.03974358974358974, 1.7777777777777777, 0.15454545454545454
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.1035084374506483E-4, insert, 0.03974358974358974, 0.8, 0.15454545454545454
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.1035084374506483E-4, insert, 0.03974358974358974, 0.8, 0.15454545454545454
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 2.1035084374506483E-4, insert, 0.03974358974358974, 0.8, 0.15454545454545454
nextDouble,SIMPLE_NAME, line no: 66,java.util.Scanner,QUALIFIED_NAME, line no: 51, 2.0685246971785014E-4, insert, 0.010480887792848335, 0.0, 0.17647058823529413
String,SIMPLE_NAME, line no: 65,java.util.Scanner,QUALIFIED_NAME, line no: 51, 2.0684734152441012E-4, insert, 0.010474430067775724, 0.0, 0.17647058823529413
String,SIMPLE_NAME, line no: 203,java.util.Scanner,QUALIFIED_NAME, line no: 51, 2.0684734152441012E-4, insert, 0.010474430067775724, 0.0, 0.17647058823529413
nextDouble,SIMPLE_NAME, line no: 66,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.0639007760934214E-4, insert, 0.009864364981504316, 0.0, 0.17647058823529413
value,SIMPLE_NAME, line no: 68,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.0638523431553769E-4, insert, 0.009858287122612447, 0.0, 0.17647058823529413
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 2.0519160191508312E-4, insert, 0.04358974358974359, 1.8, 0.14754098360655737
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 2.0519160191508312E-4, insert, 0.04358974358974359, 1.8, 0.14754098360655737
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 2.0519160191508312E-4, insert, 0.04358974358974359, 1.8, 0.14754098360655737
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 2.0519160191508312E-4, insert, 0.04358974358974359, 1.8, 0.14754098360655737
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 2.0519160191508312E-4, insert, 0.04358974358974359, 1.8, 0.14754098360655737
"\nEnter an integer > ",STRING_LITERAL, line no: 65,System.in,QUALIFIED_NAME, line no: 53, 2.039701036727477E-4, insert, 0.011090573012939002, 0.0, 0.17391304347826086
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140, 2.0378407700138084E-4, insert, 1.0, 0.75, 0.2102803738317757
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 2.02804812744182E-4, insert, 0.04230769230769231, 1.8, 0.14634146341463414
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 2.02804812744182E-4, insert, 0.04230769230769231, 1.8, 0.14634146341463414
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 2.02804812744182E-4, insert, 0.04230769230769231, 1.8, 0.14634146341463414
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 2.02804812744182E-4, insert, 0.04230769230769231, 1.8, 0.14634146341463414
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 2.02804812744182E-4, insert, 0.04230769230769231, 1.8, 0.14634146341463414
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.0174165297102243E-4, insert, 0.005128205128205128, 0.3333333333333333, 0.1702127659574468
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,args.length,QUALIFIED_NAME, line no: 50, 2.0165925369685766E-4, insert, 0.03450400492914356, 0.0, 0.15625
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139, 2.0161231063902158E-4, insert, 1.0, 0.75, 0.20093457943925233
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138, 1.9944054427666223E-4, insert, 1.0, 0.75, 0.19158878504672897
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.994122446729493E-4, insert, 0.011538461538461539, 0.0, 0.16393442622950818
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137, 1.9726877791430297E-4, insert, 1.0, 0.75, 0.1822429906542056
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 1.956678723752288E-4, insert, 0.04358974358974359, 1.8, 0.13934426229508196
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 1.956678723752288E-4, insert, 0.04358974358974359, 1.8, 0.13934426229508196
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 1.956678723752288E-4, insert, 0.04358974358974359, 0.8181818181818182, 0.13934426229508196
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 1.956678723752288E-4, insert, 0.04358974358974359, 0.8181818181818182, 0.13934426229508196
output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.9526829011867056E-4, insert, 0.033353922174181594, 0.0, 0.18439716312056736
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136, 1.9509701155194368E-4, insert, 1.0, 0.75, 0.17289719626168223
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 1.9335851189977366E-4, insert, 0.04230769230769231, 1.8, 0.13821138211382114
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 1.9335851189977366E-4, insert, 0.04230769230769231, 1.8, 0.13821138211382114
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 1.9335851189977366E-4, insert, 0.04230769230769231, 0.8181818181818182, 0.13821138211382114
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 1.9335851189977366E-4, insert, 0.04230769230769231, 0.8181818181818182, 0.13821138211382114
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135, 1.929252451895844E-4, insert, 1.0, 0.75, 0.16355140186915887
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134, 1.9075347882722507E-4, insert, 1.0, 0.75, 0.1542056074766355
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.9066994935174972E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.13333333333333333
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.9066994935174972E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.13333333333333333
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.9066994935174972E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.13333333333333333
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.9066994935174972E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.13333333333333333
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.9066994935174972E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.13333333333333333
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.9066994935174972E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.13333333333333333
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d9.value=(absnum.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 78, 1.9007967439172387E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.2102803738317757
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133, 1.8858171246486578E-4, insert, 1.0, 0.75, 0.14485981308411214
floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.885661624590961E-4, insert, 0.033353922174181594, 0.5, 0.1773049645390071
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.885377639499915E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.1323529411764706
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.885377639499915E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.1323529411764706
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.885377639499915E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.1323529411764706
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.885377639499915E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.1323529411764706
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.885377639499915E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.1323529411764706
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.885377639499915E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.1323529411764706
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d8.value=(absnum.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 77, 1.8790790802936455E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.20093457943925233
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d7.value=(absnum.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 76, 1.8573614166700526E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.19158878504672897
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("That's all  have a nice day!\n")); ,EXPRESSION_STATEMENT, line no: 203, 1.842381797401472E-4, insert, 1.0, 0.0, 0.1261682242990654
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d6.value=(absnum.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 75, 1.8356437530464594E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.1822429906542056
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132, 1.8315229655896753E-4, insert, 1.0, 0.75, 0.12149532710280374
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.82063319693511E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.1259259259259259
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.82063319693511E-4, insert, 0.046153846153846156, 1.8181818181818183, 0.1259259259259259
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 1.82063319693511E-4, insert, 0.046153846153846156, 0.8333333333333333, 0.1259259259259259
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d5.value=(absnum.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 74, 1.8139260894228665E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.17289719626168223
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68, 1.8098053019660823E-4, insert, 1.0, 0.46153846153846156, 0.11214953271028037
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.799944183333575E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.125
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.799944183333575E-4, insert, 0.04487179487179487, 1.8181818181818183, 0.125
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 1.799944183333575E-4, insert, 0.04487179487179487, 0.8333333333333333, 0.125
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d4.value=(absnum.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 73, 1.7922084257992736E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.16355140186915887
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.790483153329846E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.12162162162162163
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67, 1.7880876383424894E-4, insert, 1.0, 0.5714285714285714, 0.102803738317757
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,floatnum.value=scanner.nextDouble(); ,EXPRESSION_STATEMENT, line no: 66, 1.7772288065306927E-4, insert, 1.0, 0.0, 0.09813084112149532
d1.value=(num.value % 10); ,EXPRESSION_STATEMENT, line no: 132,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d2.value=(num.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 133,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d3.value=(num.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 134,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d4.value=(num.value % 10000) / 1000; ,EXPRESSION_STATEMENT, line no: 135,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d5.value=(num.value % 100000) / 10000; ,EXPRESSION_STATEMENT, line no: 136,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d6.value=(num.value % 1000000) / 100000; ,EXPRESSION_STATEMENT, line no: 137,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d7.value=(num.value % 10000000) / 1000000; ,EXPRESSION_STATEMENT, line no: 138,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.771068429853204E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.12080536912751678
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d3.value=(absnum.value % 1000) / 100; ,EXPRESSION_STATEMENT, line no: 72, 1.7704907621756807E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.1542056074766355
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65, 1.7555111429070998E-4, insert, 1.0, 0.0, 0.08878504672897196
output+=(String.format("\nEnter an integer > ")); ,EXPRESSION_STATEMENT, line no: 65,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.7516190713994718E-4, insert, 0.033353922174181594, 0.0, 0.16312056737588654
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d2.value=(absnum.value % 100) / 10; ,EXPRESSION_STATEMENT, line no: 71, 1.7487730985520875E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.14485981308411214
"\nEnter an integer > ",STRING_LITERAL, line no: 65,args.length,QUALIFIED_NAME, line no: 50, 1.7261713413164025E-4, insert, 0.03450400492914356, 0.0, 0.13043478260869565
"\nEnter an integer > ",STRING_LITERAL, line no: 65,System.out,QUALIFIED_NAME, line no: 56, 1.7261713413164025E-4, insert, 0.03450400492914356, 0.0, 0.13043478260869565
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.7119767341499658E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.11486486486486487
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 1.7119767341499658E-4, insert, 0.04871794871794872, 1.8333333333333333, 0.11486486486486487
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,d1.value=(absnum.value % 10); ,EXPRESSION_STATEMENT, line no: 70, 1.694478939493105E-4, insert, 0.9115384615384615, 0.46153846153846156, 0.12149532710280374
d8.value=(num.value % 100000000) / 10000000; ,EXPRESSION_STATEMENT, line no: 139,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.693088899392652E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.11409395973154363
d9.value=(num.value % 1000000000) / 100000000; ,EXPRESSION_STATEMENT, line no: 140,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 1.693088899392652E-4, insert, 0.047435897435897434, 1.8333333333333333, 0.11409395973154363
absnum.value=Math.abs(num.value); ,EXPRESSION_STATEMENT, line no: 68,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.684597794803727E-4, insert, 0.033353922174181594, 0.0, 0.15602836879432624
scanner,SIMPLE_NAME, line no: 66,mainClass.output,QUALIFIED_NAME, line no: 56, 1.6651895807644882E-4, insert, 0.0345252774352651, 0.0, 0.125
Math,SIMPLE_NAME, line no: 68,mainClass.output,QUALIFIED_NAME, line no: 56, 1.6651895807644882E-4, insert, 0.0345252774352651, 0.0, 0.125
abs,SIMPLE_NAME, line no: 68,mainClass.output,QUALIFIED_NAME, line no: 56, 1.6651895807644882E-4, insert, 0.0345252774352651, 0.0, 0.125
String,SIMPLE_NAME, line no: 65,mainClass.output,QUALIFIED_NAME, line no: 56, 1.6650300369685768E-4, insert, 0.03450400492914356, 0.0, 0.125
num,SIMPLE_NAME, line no: 68,mainClass.output,QUALIFIED_NAME, line no: 56, 1.6650300369685768E-4, insert, 0.03450400492914356, 0.0, 0.125
String,SIMPLE_NAME, line no: 203,mainClass.output,QUALIFIED_NAME, line no: 56, 1.6650300369685768E-4, insert, 0.03450400492914356, 0.0, 0.125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,i,SIMPLE_NAME, line no: 7, 1.5828991451016637E-4, insert, 0.0036968576709796672, 0.0, 0.03125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,java.util,QUALIFIED_NAME, line no: 44, 1.4940503696857672E-4, insert, 6.161429451632779E-4, 0.0, 0.125
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,System.in,QUALIFIED_NAME, line no: 53, 1.4894292975970423E-4, insert, 0.011090573012939002, 0.0, 0.125
num.value=(int)floatnum.value; ,EXPRESSION_STATEMENT, line no: 67,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.483533965016493E-4, insert, 0.033353922174181594, 0.0, 0.1347517730496454
Math,SIMPLE_NAME, line no: 68,java.util.Scanner,QUALIFIED_NAME, line no: 51, 1.4067599912961486E-4, insert, 0.010480887792848335, 0.0, 0.11764705882352941
format,SIMPLE_NAME, line no: 65,java.util.Scanner,QUALIFIED_NAME, line no: 51, 1.4067087093617482E-4, insert, 0.010474430067775724, 0.0, 0.11764705882352941
format,SIMPLE_NAME, line no: 203,java.util.Scanner,QUALIFIED_NAME, line no: 51, 1.4067087093617482E-4, insert, 0.010474430067775724, 0.0, 0.11764705882352941
abs,SIMPLE_NAME, line no: 68,mainClass.scanner,QUALIFIED_NAME, line no: 51, 1.4021360702110684E-4, insert, 0.009864364981504316, 0.0, 0.11764705882352941
String,SIMPLE_NAME, line no: 65,mainClass.scanner,QUALIFIED_NAME, line no: 51, 1.4020876372730238E-4, insert, 0.009858287122612447, 0.0, 0.11764705882352941
format,SIMPLE_NAME, line no: 65,mainClass.scanner,QUALIFIED_NAME, line no: 51, 1.4020876372730238E-4, insert, 0.009858287122612447, 0.0, 0.11764705882352941
String,SIMPLE_NAME, line no: 203,mainClass.scanner,QUALIFIED_NAME, line no: 51, 1.4020876372730238E-4, insert, 0.009858287122612447, 0.0, 0.11764705882352941
format,SIMPLE_NAME, line no: 203,mainClass.scanner,QUALIFIED_NAME, line no: 51, 1.4020876372730238E-4, insert, 0.009858287122612447, 0.0, 0.11764705882352941
Math,SIMPLE_NAME, line no: 68,System.out,QUALIFIED_NAME, line no: 56, 1.3839395807644882E-4, insert, 0.0345252774352651, 0.0, 0.1
abs,SIMPLE_NAME, line no: 68,System.out,QUALIFIED_NAME, line no: 56, 1.3839395807644882E-4, insert, 0.0345252774352651, 0.0, 0.1
num,SIMPLE_NAME, line no: 68,System.out,QUALIFIED_NAME, line no: 56, 1.3837800369685766E-4, insert, 0.03450400492914356, 0.0, 0.1
value,SIMPLE_NAME, line no: 68,System.out,QUALIFIED_NAME, line no: 56, 1.3837800369685766E-4, insert, 0.03450400492914356, 0.0, 0.1
scanner,SIMPLE_NAME, line no: 66,java.util,QUALIFIED_NAME, line no: 44, 1.3378545006165226E-4, insert, 6.165228113440197E-4, 0.0, 0.1111111111111111
abs,SIMPLE_NAME, line no: 68,java.util,QUALIFIED_NAME, line no: 44, 1.3378545006165226E-4, insert, 6.165228113440197E-4, 0.0, 0.1111111111111111
num,SIMPLE_NAME, line no: 68,java.util,QUALIFIED_NAME, line no: 44, 1.337800369685767E-4, insert, 6.161429451632779E-4, 0.0, 0.1111111111111111
Math,SIMPLE_NAME, line no: 68,System.in,QUALIFIED_NAME, line no: 53, 1.3332305795314426E-4, insert, 0.011097410604192354, 0.0, 0.1111111111111111
abs,SIMPLE_NAME, line no: 68,System.in,QUALIFIED_NAME, line no: 53, 1.3332305795314426E-4, insert, 0.011097410604192354, 0.0, 0.1111111111111111
format,SIMPLE_NAME, line no: 65,System.in,QUALIFIED_NAME, line no: 53, 1.3331792975970424E-4, insert, 0.011090573012939002, 0.0, 0.1111111111111111
num,SIMPLE_NAME, line no: 68,System.in,QUALIFIED_NAME, line no: 53, 1.3331792975970424E-4, insert, 0.011090573012939002, 0.0, 0.1111111111111111
value,SIMPLE_NAME, line no: 68,System.in,QUALIFIED_NAME, line no: 53, 1.3331792975970424E-4, insert, 0.011090573012939002, 0.0, 0.1111111111111111
format,SIMPLE_NAME, line no: 203,System.in,QUALIFIED_NAME, line no: 53, 1.3331792975970424E-4, insert, 0.011090573012939002, 0.0, 0.1111111111111111
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,mainClass.output,QUALIFIED_NAME, line no: 56, 1.3134675369685765E-4, insert, 0.03450400492914356, 0.0, 0.09375
num,SIMPLE_NAME, line no: 68,args.length,QUALIFIED_NAME, line no: 50, 1.2815073096958493E-4, insert, 0.03450400492914356, 0.0, 0.09090909090909091
"\nEnter an integer > ",STRING_LITERAL, line no: 65,java.util,QUALIFIED_NAME, line no: 44, 1.0660612392509843E-4, insert, 6.161429451632779E-4, 0.0, 0.08695652173913043
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 85, 9.747704166917625E-5, insert, 0.047435897435897434, 8.461538461538462, 0.3878504672897196
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value d9.value)); ,EXPRESSION_STATEMENT, line no: 147, 9.658977301857133E-5, insert, 0.04871794871794872, 8.461538461538462, 0.38317757009345793
"That's all  have a nice day!\n",STRING_LITERAL, line no: 203,System.out,QUALIFIED_NAME, line no: 56, 9.619050369685766E-5, insert, 0.03450400492914356, 0.0, 0.0625
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 90, 8.839274715858957E-5, insert, 0.04487179487179487, 6.923076923076923, 0.35046728971962615
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value d8.value)); ,EXPRESSION_STATEMENT, line no: 152, 8.750547850798467E-5, insert, 0.046153846153846156, 6.923076923076923, 0.34579439252336447
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 96, 7.93084526480029E-5, insert, 0.04230769230769231, 5.538461538461538, 0.3130841121495327
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value d7.value)); ,EXPRESSION_STATEMENT, line no: 158, 7.842118399739798E-5, insert, 0.04358974358974359, 5.538461538461538, 0.308411214953271
abs,SIMPLE_NAME, line no: 68,java.util.Scanner,QUALIFIED_NAME, line no: 51, 7.449952854137955E-5, insert, 0.010480887792848335, 0.0, 0.058823529411764705
num,SIMPLE_NAME, line no: 68,java.util.Scanner,QUALIFIED_NAME, line no: 51, 7.449440034793954E-5, insert, 0.010474430067775724, 0.0, 0.058823529411764705
Math,SIMPLE_NAME, line no: 68,mainClass.scanner,QUALIFIED_NAME, line no: 51, 7.403713643287155E-5, insert, 0.009864364981504316, 0.0, 0.058823529411764705
num,SIMPLE_NAME, line no: 68,mainClass.scanner,QUALIFIED_NAME, line no: 51, 7.403229313906708E-5, insert, 0.009858287122612447, 0.0, 0.058823529411764705
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 102, 7.022415813741622E-5, insert, 0.03974358974358974, 4.3076923076923075, 0.2757009345794392
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value d6.value)); ,EXPRESSION_STATEMENT, line no: 164, 6.933688948681132E-5, insert, 0.041025641025641026, 4.3076923076923075, 0.27102803738317754
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 107, 6.113986362682955E-5, insert, 0.03717948717948718, 3.230769230769231, 0.2383177570093458
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value d5.value)); ,EXPRESSION_STATEMENT, line no: 169, 6.025259497622464E-5, insert, 0.038461538461538464, 3.230769230769231, 0.2336448598130841
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n-%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 113, 5.3141452297422536E-5, insert, 0.03461538461538462, 2.307692307692308, 0.205607476635514
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n%d\n" d1.value d2.value d3.value d4.value)); ,EXPRESSION_STATEMENT, line no: 176, 5.225418364681762E-5, insert, 0.035897435897435895, 2.307692307692308, 0.20093457943925233
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n-%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 119, 4.5143040968015504E-5, insert, 0.03205128205128205, 1.5384615384615385, 0.17289719626168223
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n%d\n" d1.value d2.value d3.value)); ,EXPRESSION_STATEMENT, line no: 182, 4.4255772317410595E-5, insert, 0.03333333333333333, 1.5384615384615385, 0.16822429906542055
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n-%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 124, 3.605874645742883E-5, insert, 0.029487179487179487, 0.9230769230769231, 0.13551401869158877
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n%d\n" d1.value d2.value)); ,EXPRESSION_STATEMENT, line no: 187, 3.517147780682392E-5, insert, 0.03076923076923077, 0.9230769230769231, 0.1308411214953271
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 2.8643185245783197E-5, insert, 0.016666666666666666, 0.0, 0.11214953271028037
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 2.775591659517828E-5, insert, 0.017948717948717947, 0.0, 0.10747663551401869
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 2.7106242897036612E-5, insert, 0.06282051282051282, 0.0, 0.07476635514018691
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n-%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 129, 2.697445194684216E-5, insert, 0.026923076923076925, 0.46153846153846156, 0.09813084112149532
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n%d\n" d1.value)); ,EXPRESSION_STATEMENT, line no: 192, 2.608718329623725E-5, insert, 0.028205128205128206, 0.46153846153846156, 0.09345794392523364
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,mainClass.exec(); ,EXPRESSION_STATEMENT, line no: 55, 2.1676826991138364E-5, insert, 0.06282051282051282, 0.0, 0.0514018691588785
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n7\n4\n6\n3\n8\n4\n7\n4\n1\n2\n")); ,EXPRESSION_STATEMENT, line no: 201, 1.8075778492867395E-5, insert, 0.011538461538461539, 0.0, 0.07009345794392523
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,output+=(String.format("\n0\n")); ,EXPRESSION_STATEMENT, line no: 197, 1.7002888785650577E-5, insert, 0.02564102564102564, 0.0, 0.056074766355140186
d10.value=((num.value - d1.value - (d2.value * 10)- (d3.value * 100)- (d4.value * 1000)- (d5.value * 10000)- (d6.value * 100000)- (d7.value * 1000000)- (d8.value * 10000000)- (d9.value * 100000000)) / 1000000000); ,EXPRESSION_STATEMENT, line no: 141,value=i; ,EXPRESSION_STATEMENT, line no: 7, 9.48152357173615E-6, insert, 0.005128205128205128, 0.08333333333333333, 0.037383177570093455
