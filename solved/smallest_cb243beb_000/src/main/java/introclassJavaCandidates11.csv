min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 6.0304, insert, 1.0, 3.0, 1.0
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 5.8315, insert, 1.0, 3.0, 1.0
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 5.8315, insert, 1.0, 3.0, 1.0
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 5.8315, insert, 1.0, 3.0, 1.0
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 5.8315, insert, 1.0, 3.0, 1.0
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 5.786328946018454, insert, 1.0, 3.0, 1.0
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 5.677550228929434, insert, 1.0, 3.0, 1.0
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 5.41530017945975, insert, 1.0, 3.0, 1.0
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 5.175390322580645, insert, 1.0, 3.0, 0.16129032258064516
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 5.147387436584492, insert, 1.0, 3.0, 0.37735849056603776
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 4.899345467024672, insert, 1.0, 3.0, 0.23809523809523808
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 4.637095417554988, insert, 1.0, 3.0, 0.23809523809523808
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 4.4804, insert, 1.0, 1.5, 0.95
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 4.4804, insert, 1.0, 1.5, 0.95
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 4.4804, insert, 1.0, 1.5, 0.95
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 4.2957857142857145, insert, 1.0, 1.5, 0.9642857142857143
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 4.236328946018454, insert, 1.0, 1.5, 0.95
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 4.236328946018454, insert, 1.0, 1.5, 0.95
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 4.236328946018454, insert, 1.0, 1.5, 0.95
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 4.127550228929434, insert, 1.0, 1.5, 0.95
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 4.127550228929434, insert, 1.0, 1.5, 0.95
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 4.127550228929434, insert, 1.0, 1.5, 0.95
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 3.9946857142857146, insert, 1.0, 1.5, 0.4642857142857143
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 3.872590566037736, insert, 1.0, 1.5, 0.3584905660377358
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 3.8653001794597506, insert, 1.0, 1.5, 0.95
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 3.8653001794597506, insert, 1.0, 1.5, 0.95
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 3.8653001794597506, insert, 1.0, 1.5, 0.95
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 3.8402904761904764, insert, 1.0, 1.6, 0.2261904761904762
output+=(String.format("Please enter 4 numbers separated by spaces > ")); ,EXPRESSION_STATEMENT, line no: 62,output+=(String.format("Please enter 4 numbers separated by spaces > ")); ,EXPRESSION_STATEMENT, line no: 62, 3.8315, insert, 1.0, 1.0, 1.0
scanner,SIMPLE_NAME, line no: 64,scanner,SIMPLE_NAME, line no: 51, 3.7813, insert, 0.12213740458015267, 1.0, 1.0
scanner,SIMPLE_NAME, line no: 65,scanner,SIMPLE_NAME, line no: 51, 3.7813, insert, 0.12213740458015267, 1.0, 1.0
scanner,SIMPLE_NAME, line no: 66,scanner,SIMPLE_NAME, line no: 51, 3.7813, insert, 0.12213740458015267, 1.0, 1.0
scanner,SIMPLE_NAME, line no: 67,scanner,SIMPLE_NAME, line no: 51, 3.7813, insert, 0.12213740458015267, 1.0, 1.0
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 3.750614660304169, insert, 1.0, 1.5, 0.4642857142857143
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 3.673526177024482, insert, 0.8888888888888888, 1.5, 0.2542372881355932
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 3.641835943215148, insert, 1.0, 1.5, 0.4642857142857143
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 3.5962194222089305, insert, 1.0, 1.6, 0.2261904761904762
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 3.5705857142857145, insert, 1.0, 1.6, 0.21428571428571427
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 3.5586809523809526, insert, 1.0, 1.6, 0.20238095238095238
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 3.5393188679245284, insert, 1.0, 1.5, 0.2830188679245283
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 3.5232547524700673, insert, 1.0, 1.6, 0.1532258064516129
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 3.51974079496717, insert, 1.0, 1.5, 0.3584905660377358
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 3.517590322580645, insert, 1.0, 1.6, 0.16129032258064516
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 3.4294551230429366, insert, 0.8888888888888888, 1.5, 0.2542372881355932
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 3.414476035381047, insert, 1.0, 1.6, 0.1532258064516129
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 3.379585893745465, insert, 1.0, 1.5, 0.4642857142857143
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 3.320676405953916, insert, 0.8888888888888888, 1.5, 0.2542372881355932
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 3.2574907454974866, insert, 1.0, 1.5, 0.3584905660377358
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 3.1522259859113637, insert, 1.0, 1.6, 0.1532258064516129
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 3.0946857142857147, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 3.0946857142857147, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 3.0946857142857147, insert, 1.0, 0.6000000000000001, 0.4642857142857143
output+=(String.format("Please enter 4 numbers separated by spaces > ")); ,EXPRESSION_STATEMENT, line no: 62,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 3.070816129032258, insert, 1.0, 1.0, 0.31451612903225806
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 3.0584263564842322, insert, 0.8888888888888888, 1.5, 0.2542372881355932
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 2.8660982142857145, insert, 0.0703125, 1.5, 0.4642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 2.8660982142857145, insert, 0.0703125, 1.5, 0.4642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 2.8660982142857145, insert, 0.0703125, 1.5, 0.4642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 2.8660982142857145, insert, 0.0703125, 1.5, 0.4642857142857143
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 2.850614660304169, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 2.850614660304169, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 2.850614660304169, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65, 2.7418359432151482, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 2.7418359432151482, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 2.7418359432151482, insert, 1.0, 0.6000000000000001, 0.4642857142857143
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 2.6393188679245285, insert, 1.0, 0.6000000000000001, 0.2830188679245283
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 2.6393188679245285, insert, 1.0, 0.6000000000000001, 0.2830188679245283
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,if (min.value >= n3.value) {   min.value=n3.value; } ,IF_STATEMENT, line no: 73, 2.6393188679245285, insert, 1.0, 0.6000000000000001, 0.2830188679245283
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 2.625347619047619, insert, 1.0, 0.6666666666666666, 0.20238095238095238
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,if (n1.value <= n2.value) {   min.value=n1.value; }  else {   min.value=n2.value; } ,IF_STATEMENT, line no: 68, 2.625347619047619, insert, 1.0, 0.6666666666666666, 0.20238095238095238
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 2.584256989247312, insert, 1.0, 0.6666666666666666, 0.16129032258064516
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 2.584256989247312, insert, 1.0, 0.6666666666666666, 0.16129032258064516
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,if (min.value >= n4.value) {   min.value=n4.value; }  else {   output+=(String.format("%d is the smallest\n" min.value)); } ,IF_STATEMENT, line no: 76, 2.584256989247312, insert, 1.0, 0.6666666666666666, 0.16129032258064516
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64, 2.479585893745465, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66, 2.479585893745465, insert, 1.0, 0.6000000000000001, 0.4642857142857143
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67, 2.479585893745465, insert, 1.0, 0.6000000000000001, 0.4642857142857143
output+=(String.format("Please enter 4 numbers separated by spaces > ")); ,EXPRESSION_STATEMENT, line no: 62,System.out.println(mainClass.output); ,EXPRESSION_STATEMENT, line no: 56, 2.473180743243243, insert, 0.3984375, 1.0, 0.24324324324324326
output+=(String.format("Please enter 4 numbers separated by spaces > ")); ,EXPRESSION_STATEMENT, line no: 62,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 2.452277027027027, insert, 0.09375, 1.0, 0.527027027027027
scanner,SIMPLE_NAME, line no: 64,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.299035698248765, insert, 0.11450381679389313, 1.0, 0.4117647058823529
scanner,SIMPLE_NAME, line no: 65,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.299035698248765, insert, 0.11450381679389313, 1.0, 0.4117647058823529
scanner,SIMPLE_NAME, line no: 66,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.299035698248765, insert, 0.11450381679389313, 1.0, 0.4117647058823529
scanner,SIMPLE_NAME, line no: 67,mainClass.scanner,QUALIFIED_NAME, line no: 51, 2.299035698248765, insert, 0.11450381679389313, 1.0, 0.4117647058823529
min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77,value=i; ,EXPRESSION_STATEMENT, line no: 7, 2.208177777777778, insert, 0.4444444444444444, 0.3333333333333333, 0.4
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,min.value=n4.value; ,EXPRESSION_STATEMENT, line no: 77, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74, 1.9660982142857144, insert, 0.0703125, 0.6000000000000001, 0.4642857142857143
min.value=n3.value; ,EXPRESSION_STATEMENT, line no: 74,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.9641067237962322, insert, 0.4444444444444444, 0.3333333333333333, 0.4
min.value=n1.value; ,EXPRESSION_STATEMENT, line no: 69,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.8553280067072115, insert, 0.4444444444444444, 0.3333333333333333, 0.4
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.803673670212766, insert, 0.3984375, 0.5, 0.14893617021276595
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.803673670212766, insert, 0.3984375, 0.5, 0.14893617021276595
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.803673670212766, insert, 0.3984375, 0.5, 0.14893617021276595
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,if (args.length > 0) {   mainClass.scanner=new java.util.Scanner(args[0]); }  else {   mainClass.scanner=new java.util.Scanner(System.in); } ,IF_STATEMENT, line no: 50, 1.803673670212766, insert, 0.3984375, 0.5, 0.14893617021276595
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 1.775610576923077, insert, 0.1171875, 0.5, 0.3269230769230769
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 1.775610576923077, insert, 0.1171875, 0.5, 0.3269230769230769
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 1.775610576923077, insert, 0.1171875, 0.5, 0.3269230769230769
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,mainClass.scanner=new java.util.Scanner(System.in); ,EXPRESSION_STATEMENT, line no: 53, 1.775610576923077, insert, 0.1171875, 0.5, 0.3269230769230769
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 1.7730625, insert, 0.1015625, 0.5, 0.34
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 1.7730625, insert, 0.1015625, 0.5, 0.34
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 1.7730625, insert, 0.1015625, 0.5, 0.34
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,mainClass.scanner=new java.util.Scanner(args[0]); ,EXPRESSION_STATEMENT, line no: 51, 1.7730625, insert, 0.1015625, 0.5, 0.34
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 1.7455889830508475, insert, 0.09375, 0.6000000000000001, 0.22033898305084745
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 1.7455889830508475, insert, 0.09375, 0.6000000000000001, 0.22033898305084745
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 1.7455889830508475, insert, 0.09375, 0.6000000000000001, 0.22033898305084745
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,output+=(String.format("%d is the smallest\n" min.value)); ,EXPRESSION_STATEMENT, line no: 79, 1.7455889830508475, insert, 0.09375, 0.6000000000000001, 0.22033898305084745
min.value=n2.value; ,EXPRESSION_STATEMENT, line no: 71,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.5930779572375282, insert, 0.4444444444444444, 0.3333333333333333, 0.4
n1.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 64,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.481797619047619, insert, 0.03125, 0.3333333333333333, 0.2857142857142857
n2.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 65,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.481797619047619, insert, 0.03125, 0.3333333333333333, 0.2857142857142857
n3.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 66,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.481797619047619, insert, 0.03125, 0.3333333333333333, 0.2857142857142857
n4.value=scanner.nextInt(); ,EXPRESSION_STATEMENT, line no: 67,value=i; ,EXPRESSION_STATEMENT, line no: 7, 1.481797619047619, insert, 0.03125, 0.3333333333333333, 0.2857142857142857
